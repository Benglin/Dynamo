class _FunctionObject
{
    def DoEvaluate(v:var[]..[])
    {
        return = null;
    }
}

class _SingleFunctionObject extends _FunctionObject
{
    __functionPointers : function;
    __argumtNumber : int;
    __params : var[]..[];
    __hasParamAt : bool[];
    
    constructor _SingleFunctionObject(fptr : function, 
                                      argNumber: int, 
                                      paramPositions : int[], 
                                      params : var[]..[])
    {
        __functionPointers = fptr;
        __argumtNumber = argNumber;
        
        __hasParamAt[0..__argumtNumber - 1] = false;
        __hasParamAt[paramPositions] = true;
        
        __params = params;
    }
    
    private def GetNextEmptyParamPos(hasParamAt : bool[])
    {
        return = [Imperative]
        {
            for(_i in 0..Count(hasParamAt) - 1)
            {
                if (!hasParamAt[_i])
                    return = _i;
            }
            return = -1;
        }
    }
    
    private def DoEvaluateImp(fptr : function, 
                              params : var[]..[])
    {
        return = Evaluate(fptr, params);
    }
    
    def DoEvaluate(param: var[]..[])
    {      
        return = [Imperative]
        {           
            _nextParamPosition = GetNextEmptyParamPos(__hasParamAt);
            
            if (_nextParamPosition < 0)
            {
                return = null;
            }
            else
            {
                _params = __params;
                _hasParamAt = __hasParamAt;
                
                _params[_nextParamPosition] = param;
                _hasParamAt[_nextParamPosition] = true;
                
                _nextParamPosition = GetNextEmptyParamPos(_hasParamAt);
                if (_nextParamPosition < 0)
                {
                    return = DoEvaluateImp(__functionPointers, _params);
                }
                else
                {
                    _paramPositions = { };
                    for (_i in 0..__argumtNumber - 1)
                    {
                        if (_hasParamAt[_i])
                        {
                            _paramPositions = Concat(_paramPositions, { _i });
                        }
                    }
                
                    return = _SingleFunctionObject._SingleFunctionObject(
                                                __functionPointers,
                                                __argumtNumber,
                                                _paramPositions,
                                                _params);
                }
            }
        }  
    }
}

class _ComposedFunctionObject extends _FunctionObject
{
    __funcs : _FunctionObject[];
    
    constructor _ComposedFunctionObject(funcs : _FunctionObject[])
    {
        __funcs = funcs;
    }
    
    def DoEvaluate(param:var[]..[])
    {
        return = [Imperative]
        {
            _count = Count(__funcs);
            _v = param;
            
            for(_i in _count - 1.. 0)
            {
                _f = __funcs[_i];
                _v = _f.DoEvaluate(_v);
            }
            return = _v;
        }
    }
}

def Apply(functionObject: _FunctionObject, param: var[]..[])
{
    return = functionObject.DoEvaluate(param);
}

def Compose(funcs : _FunctionObject[])
{
    return = _ComposedFunctionObject(funcs);
}

def MinimumItemByKey(functionObject: _FunctionObject, list: var[])
{
    return = [Imperative]
    {
        _count = Count(list);

        if (_count == 0)
        {
            return = null;
        }

        _min = list[0];
        _minProjection = functionObject.DoEvaluate(list[0]);

        for (_index in 1..(_count - 1))
        {
            _currentProjection = functionObject.DoEvaluate(list[_index]);
            if (_currentProjection < _minProjection)
            {
                _min = list[_index];
                _minProjection = _currentProjection;
            }
        }

        return = _min;
    }
}

def MaximumItemByKey(functionObject: _FunctionObject, list: var[])
{
    return = [Imperative]
    {
        if (list == null)
        {
            return = null;
        }

        _count = Count(list);
        if (_count == 0)
        {
            return = null;
        }

        _max = list[0];
        _maxProjection = functionObject.DoEvaluate(list[0]);

        for (_index in 1..(_count - 1))
        {
            _currentProjection = functionObject.DoEvaluate(list[_index]);
            if (_currentProjection > _maxProjection)
            {
                _max = list[_index];
                _maxProjection = _currentProjection;
            }
        }

        return = _max;
    }
}

def Filter(functionObject: _FunctionObject, list: var[])
{
    return = [Imperative]
    {
        if (list == null) 
        {
            return = null;
        }

        _count = Count(list);
        if (_count == 0)
        {
            return = {};
        }

        _resultList = {};
        _index = 0;

        for (_i in 0..(_count - 1))
        {
            _value = list[_i];
            if (functionObject.DoEvaluate(_value))
            {
                _resultList[_index] = _value;
                _index = _index + 1;
            }
        }

        return = _resultList;
    }
}

def FilterOut(functionObject: _FunctionObject, list: var[])
{
    return = [Imperative]
    {
        if (list == null) 
        {
            return = null;
        }

        _count = Count(list);
        if (_count == 0)
        {
            return = {};
        }

        _resultList = {};
        _index = 0;

        for (_i in 0..(_count - 1))
        {
            _value = list[_i];
            if (!functionObject.DoEvaluate(_value))
            {
                _resultList[_index] = _value;
                _index = _index + 1;
            }
        }

        return = _resultList;
    }
}

def TrueForAll(functionObject: _FunctionObject, list: var[])
{
    return = [Imperative]
    {
        if (list == null) 
        {
            return = null;
        }

        _count = Count(list);
        if (_count == 0)
        {
            return = true;
        }

        _index = 0;

        for (_i in 0..(_count - 1))
        {
            _value = list[_i];
            if (!functionObject.DoEvaluate(_value))
            {
                return = false;
            }
        }

		return = true;
    }
}

def TrueForAny(functionObject: _FunctionObject, list: var[])
{
    return = [Imperative]
    {
        if (list == null) 
        {
            return = null;
        }

        _count = Count(list);
        if (_count == 0)
        {
            return = true;
        }

        _index = 0;

        for (_i in 0..(_count - 1))
        {
            _value = list[_i];
            if (functionObject.DoEvaluate(_value))
            {
                return = true;
            }
        }

		return = false;
    }
}

def ForEach(functionObject: _FunctionObject, list: var[])
{
    return = [Imperative]
    {
        if (list == null) 
        {
            return = null;
        }

        _count = Count(list);
        if (_count == 0)
        {
            return = null;
        }

        _index = 0;

        for (_i in 0..(_count - 1))
        {
            _value = list[_i];
            list[_i] = functionObject.DoEvaluate(_value);
        }

		return = list;
    }
}