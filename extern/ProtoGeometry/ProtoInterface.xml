<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ProtoInterface</name>
    </assembly>
    <members>
        <member name="T:Autodesk.DesignScript.Runtime.SupressImportIntoVMAttribute">
            <summary>
            This attribute is used to specify whether the item will be imported
            into the VM.
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Runtime.IsVisibleInDynamoLibraryAttribute">
            <summary>
            This attribute is used to specify whether the item will be displayed
            in the library.
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Runtime.ArbitraryDimensionArrayImportAttribute">
            <summary>
            This attribute is used to marshal parameters or return value of a method 
            as arbitrary dimension array in DesignScript VM. Usually this attribute
            is expected to be applied on IEnumerable derived object types. This 
            attribute should be used if you expect the IEnumerable parameters or
            return value may hold nested collection.
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Runtime.ExtensionApplicationAttribute">
            <summary>
            This attribute is used to specify the Type of class that implements
            IExtensionApplication interface in the specified assembly. This 
            attribute can be used only once at assembly level. Having this attribute
            saves the cost of reflection on each exported types to find the type
            that implements IExtensionApplication interface.
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Runtime.GraphicDataProviderAttribute">
            <summary>
            This attribute is used to specify the Type of class that implements
            IGraphicDataProvider interface in the specified assembly. This 
            attribute can be used only once at assembly level. Having this attribute
            saves the cost of reflection on each exported types to find the type
            that implements IGraphicDataProvider interface.
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Runtime.ContextDataProviderAttribute">
            <summary>
            This attribute is used to specify the Type of class that implements
            IContextDataProvider interface in the specified assembly. This 
            attribute can be used only once at assembly level. Having this attribute
            saves the cost of reflection on each exported types to find the type
            that implements IContextDataProvider interface.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Runtime.ContextDataProviderAttribute.#ctor(System.Type,System.Func{System.Boolean})">
            <summary>
            Constructor to construct this attribute with a delegate to check
            whether this data provider captures data.
            </summary>
            <param name="dataProviderType">Type that implements 
            IContextDataProvider interface</param>
            <param name="capturesData">Delegate to check if the provider can
            capture data</param>
        </member>
        <member name="M:Autodesk.DesignScript.Runtime.ContextDataProviderAttribute.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="dataProviderType">Type that implements 
            IContextDataProvider interface</param>
        </member>
        <member name="P:Autodesk.DesignScript.Runtime.ContextDataProviderAttribute.Type">
            <summary>
            Type implementing IContextDataProvider interface.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Runtime.ContextDataProviderAttribute.CapturesData">
            <summary>
            Checks if this type can capture data interactively
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Runtime.AllowRankReductionAttribute">
            <summary>
            This attribute can be applied to methods that return collection of
            objects, but with some combination of input parameters it returns a 
            collection of single object and at designscript side we want the method
            to return a single object instead of a collection of single object.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Runtime.AllowRankReductionAttribute.ReduceRank(System.Object)">
            <summary>
            Utility method to get the single object from the collection of 
            single object. If the input object is neither a collection nor a
            collection of single object, this method returns the input object.
            </summary>
            <param name="collection">Input object to be converted to singleton.
            </param>
            <returns>An object from the collection of single object or the 
            input object.</returns>
            
        </member>
        <member name="M:Autodesk.DesignScript.Runtime.AllowRankReductionAttribute.IsRankReducible(System.Object)">
            <summary>
            Checks if the input object is a collection of single object.
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="T:Autodesk.DesignScript.Runtime.MultiReturnAttribute">
            <summary>
            This attribute describes keys in the returned dictionary of a method.
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Runtime.RuntimeRequirementAttribute">
            <summary>
            This attribute can be applied to method which requires some runtime 
            support from DesignScript, e.g., tracing. 
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Runtime.RegisterForTraceAttribute">
            <summary>
            This attribute can be applied to methods that register callsite with
            trace mechanism.
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Interfaces.IDesignScriptEntity">
            <summary>
            This interface represents internal data model for a design script 
            objects. The user facing design script object creates and owns
            a kernal specific data model that implements this or derived interface.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IDesignScriptEntity.SetOwner(System.Object)">
            <summary>
            Sets the owner of this entity for back reference.
            </summary>
            <param name="owner">Owner object</param>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IDesignScriptEntity.Owner">
            <summary>
            Gets user facing DesignScript object that owns this entity data.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ITransformableEntity.Translate(System.Double,System.Double,System.Double)">
            <summary>
            Translate the object by WCS X, Y, and Z values.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ITransformableEntity.Translate(Autodesk.DesignScript.Interfaces.IVectorEntity)">
            <summary>
            Translate the object in the direction and magnitude of input Vector.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ITransformableEntity.Translate(Autodesk.DesignScript.Interfaces.IVectorEntity,System.Double)">
            <summary>
            Translate the object in the direction of input Vector, by dist distance.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ITransformableEntity.Transform(Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity)">
            <summary>
            Transform the object by the input CoordinateSystem matrix.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ITransformableEntity.TransformFromTo(Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity,Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity)">
            <summary>
            Transform an object between first CoordinateSystem to the second CoordinateSystem.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ITransformableEntity.Rotate(Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IVectorEntity,System.Double)">
            <summary>
            Rotates an object around an origin and an axis by a specified 
            degree
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ITransformableEntity.Rotate(Autodesk.DesignScript.Interfaces.IPlaneEntity,System.Double)">
            <summary>
            Rotates an object around the Plane origin and normal by a specified 
            degree
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ITransformableEntity.Scale(System.Double)">
            <summary>
            Scale uniformly around the origin
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ITransformableEntity.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Scale non-uniformly around the origin
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ITransformableEntity.Scale(Autodesk.DesignScript.Interfaces.IPointEntity,System.Double)">
            <summary>
            Scale uniformly around a given Point
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ITransformableEntity.Scale(Autodesk.DesignScript.Interfaces.IPlaneEntity,System.Double,System.Double,System.Double)">
            <summary>
            Scale non-uniformly around a given Plane
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ITransformableEntity.Scale(Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IPointEntity)">
            <summary>
            Scale uniformly around a given point, using 
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ITransformableEntity.Scale1D(Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IPointEntity)">
            <summary>
            Scale in one dimension by base and 2 pick points.  The scaling axis is defined by the line between base and pick0.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ITransformableEntity.Scale2D(Autodesk.DesignScript.Interfaces.IPlaneEntity,Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IPointEntity)">
            <summary>
            Scale in two dimension by base and 2 pick points  The two pick points are projected onto the base plane in order to determine the 2d scale factors
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ITransformableEntity.Mirror(Autodesk.DesignScript.Interfaces.IPlaneEntity)">
            <summary>
            Mirror the object across the input Plane
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryEntity.Clone">
            <summary>
            Copy the given Geometry
            </summary>
            <returns>A new copy</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryEntity.DistanceTo(Autodesk.DesignScript.Interfaces.IGeometryEntity)">
            <summary>
            Obtain the distance from this Geometry to another
            </summary>
            <param name="entity">The other Geometry</param>
            <returns>The distance</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryEntity.ClosestPointTo(Autodesk.DesignScript.Interfaces.IGeometryEntity)">
            <summary>
            Obtain the closest Point on this Geometry to the other
            </summary>
            <search>NearestPoint</search>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryEntity.DoesIntersect(Autodesk.DesignScript.Interfaces.IGeometryEntity)">
            <summary>
            Determine if another Geometry object intersects with this one
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryEntity.Intersect(Autodesk.DesignScript.Interfaces.IGeometryEntity)">
            <summary>
            Get the intersection Geometry for this object and another
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryEntity.IntersectAll(Autodesk.DesignScript.Interfaces.IGeometryEntity[])">
            <summary>
            Get the intersection of Geometry for this object and a collection of other Geometries. Finds common geometry of all participants.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryEntity.Split(Autodesk.DesignScript.Interfaces.IGeometryEntity)">
            <summary>
            Split this Geometry using another Geometry as a cutting "tool"
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryEntity.Trim(Autodesk.DesignScript.Interfaces.IGeometryEntity,Autodesk.DesignScript.Interfaces.IPointEntity)">
            <summary>
            Removes elements of the entity closest to the pick point
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryEntity.Explode">
            <summary>
            Separates compound or non-separated elements into their component
            parts.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryEntity.IsAlmostEqualTo(Autodesk.DesignScript.Interfaces.IGeometryEntity)">
            <summary>
            Check if the two objects have the same representational geometry or numerical values
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IGeometryEntity.ContextCoordinateSystem">
            <summary>
            The CoordinateSystem that this Geometry is defined in
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IGeometryEntity.BoundingBox">
            <summary>
            Get the BoundingBox containing the given piece of Geometry
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IVectorEntity.AsPoint">
            <summary>
            Get the Point with the same X, Y, and Z component
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IVectorEntity.Reverse">
            <summary>
            Get the reverse of the vector.  Essentially this negates the X, Y, and Z components of the Vector.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IVectorEntity.Add(Autodesk.DesignScript.Interfaces.IVectorEntity)">
            <summary>
            Add a vector
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IVectorEntity.Subtract(Autodesk.DesignScript.Interfaces.IVectorEntity)">
            <summary>
            Subtract a vector
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IVectorEntity.Cross(Autodesk.DesignScript.Interfaces.IVectorEntity)">
            <summary>
            Form the cross product of two vectors
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IVectorEntity.Dot(Autodesk.DesignScript.Interfaces.IVectorEntity)">
            <summary>
            Form the dot product of two vectors
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IVectorEntity.Normalized">
            <summary>
            Get the normalized version of a vector
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IVectorEntity.IsParallel(Autodesk.DesignScript.Interfaces.IVectorEntity)">
            <summary>
            Determine whether two vectors are parallel or not
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IVectorEntity.IsAlmostEqualTo(Autodesk.DesignScript.Interfaces.IVectorEntity)">
            <summary>
            Determine whether two vectors ae almost equal
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IVectorEntity.Transform(Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity)">
            <summary>
            Transform this Vector by input CoordinateSystem matrix.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IVectorEntity.Rotate(Autodesk.DesignScript.Interfaces.IVectorEntity,System.Double)">
            <summary>
            Rotates a Vector around an axis by a specified number of
            degrees
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IVectorEntity.Rotate(Autodesk.DesignScript.Interfaces.IPlaneEntity,System.Double)">
            <summary>
            Rotates an object around the Plane origin and normal by a specified 
            degree
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IVectorEntity.Scale(System.Double)">
            <summary>
            Scale Vector uniformly around the origin
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IVectorEntity.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Scale Vector non-uniformly around the origin
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IVectorEntity.AngleBetween(Autodesk.DesignScript.Interfaces.IVectorEntity)">
            <summary>
            Returns the angle between the two Vectors, in degrees
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IVectorEntity.X">
            <summary>
            Get the X component of a Vector
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IVectorEntity.Y">
            <summary>
            Get the Y component of a Vector
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IVectorEntity.Z">
            <summary>
            Get the Z component of a Vector
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IVectorEntity.Length">
            <summary>
            Get the length of the vector - otherwise known as the Euclidean norm
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPointEntity.AsVector">
            <summary>
            Get the Vector with the same X, Y, and Z component
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPointEntity.Add(Autodesk.DesignScript.Interfaces.IVectorEntity)">
            <summary>
            Add a vector to a point.  The same as Translate(Vector).
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPointEntity.Subtract(Autodesk.DesignScript.Interfaces.IVectorEntity)">
            <summary>
            Subtract a vector from a point.  The same as Translate(-Vector).
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPointEntity.Project(Autodesk.DesignScript.Interfaces.IGeometryEntity,Autodesk.DesignScript.Interfaces.IVectorEntity)">
            <summary>
            Project another piece of Geometry onto this along a given direction Vector
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IPointEntity.X">
            <summary>
            Get the X component of a Point
            </summary>
            <search></search>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IPointEntity.Y">
            <summary>
            Get the Y component of a Point
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IPointEntity.Z">
            <summary>
            Get the Z component of a Point
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IUVEntity.U">
            <summary>
            Get the U component of a UV
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IUVEntity.V">
            <summary>
            Get the V component of a V
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity.Inverse">
            <summary>
            Get the inverse of this CoordinateSystem - applying this CoordinateSystem to a piece of Geometry reverses the original.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity.PostMultiplyBy(Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity)">
            <summary>
            Apply the argument CoordinateSystem after this one - Result = this * other
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity.PreMultiplyBy(Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity)">
            <summary>
            Apply the argument CoordinateSystem before this one - Result = other * this
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity.ScaleFactor">
            <summary>
            Returns a Vector containing the X, Y, and Z scale factors
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity.IsEqualTo(Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity)">
            <summary>
            Determine if two CoordinateSystems are equal
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity.IsSingular">
            <summary>
            Determine whether it is possible to get the Inverse of this CoordinateSystem
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity.IsScaledOrtho">
            <summary>
            Tests if the scaling orthogonal, i.e. does it have a shear component.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity.IsUniscaledOrtho">
            <summary>
            Tests if the scaling orthogonal and are all the vectors normalized.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity.Determinant">
            <summary>
            Obtain the Determinant of this CoordinateSystem
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity.Origin">
            <summary>
            Creates a Point representing the CoordinateSystem origin. 
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity.XAxis">
            <summary>
            Returns X Axis of CoordinateSystem.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity.YAxis">
            <summary>
            Returns Y Axis of CoordinateSystem.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity.ZAxis">
            <summary>
            Returns Z Axis of CoordinateSystem.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity.XScaleFactor">
            <summary>
            Returns the X Axis scaling of the CoordinateSystem: the length of the X Axis vector.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity.YScaleFactor">
            <summary>
            Returns the Y Axis scaling of the CoordinateSystem: the length of the Y Axis vector.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity.ZScaleFactor">
            <summary>
            Returns the Z Axis scaling of the CoordinateSystem: the length of the Z Axis vector.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity.XYPlane">
            <summary>
            Returns the Plane the X and Y axes lie in, with root at the origin.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity.YZPlane">
            <summary>
            Returns the Plane the Y and Z axes lie in, with root at the origin.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity.ZXPlane">
            <summary>
            Returns the Plane the Z and X axes lie in, with root at the origin.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IIndexGroupEntity.Count">
            <summary>
            Either 3 or 4, depending if it represents a triangle or a quad
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IIndexGroupEntity.A">
            <summary>
            The first index
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IIndexGroupEntity.B">
            <summary>
            The second index
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IIndexGroupEntity.C">
            <summary>
            The third index
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IIndexGroupEntity.D">
            <summary>
            The fourth index
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IBoundingBoxEntity.Intersection(Autodesk.DesignScript.Interfaces.IBoundingBoxEntity)">
            <summary>
            Get the intersection of two BoundingBoxes
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IBoundingBoxEntity.Intersects(Autodesk.DesignScript.Interfaces.IBoundingBoxEntity)">
            <summary>
            Determine whether two BoundingBoxes intersect
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IBoundingBoxEntity.IsEmpty">
            <summary>
            Determine if the BoundingBox is empty
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IBoundingBoxEntity.Contains(Autodesk.DesignScript.Interfaces.IPointEntity)">
            <summary>
            Determine if a point is inside of the BoundingBox
            </summary>
            <param name="point">The test point</param>
            <returns>True if the point is inside, otherwise False</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IBoundingBoxEntity.ToCuboid">
            <summary>
            Get the BoundingBox as a Solid Cuboid
            </summary>
            <returns>A Cuboid representation of the BoundingBox</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IBoundingBoxEntity.ToPolySurface">
            <summary>
            Get the BoundingBox as a collection of Surfaces
            </summary>
            <returns>A PolySurface representation of the BoundingBox</returns>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IBoundingBoxEntity.MinPoint">
            <summary>
            The minimum point
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IBoundingBoxEntity.MaxPoint">
            <summary>
            The maximum point
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IBoundingBoxEntity.ContextCoordinateSystem">
            <summary>
            The CoordinateSystem that this BoundingBox is defined in
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.PointAtParameter(System.Double)">
            <summary>
            Get a Point on the Curve at a specified parameter between StartParameter() and EndParameter()
            </summary>
            <param name="param">The parameter at which to evaluate</param>
            <returns>The result</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.TangentAtParameter(System.Double)">
            <summary>
            Get a Vector tangent to the curve at a specified parameter between StartParameter() and EndParameter()
            </summary>
            <param name="param">The parameter at which to evaluate</param>
            <returns>A Vector parallel to the curve at param</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.NormalAtParameter(System.Double)">
            <summary>
            Get a Vector perpendicular to the curve at a specified parameter between StartParameter() and EndParameter()
            </summary>
            <param name="param">The parameter at which to evaluate</param>
            <returns>A Vector perpendicular to the curve at param</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.CoordinateSystemAtParameter(System.Double)">
            <summary>
            Get a CoordinateSystem with origin at the point at the given parameter. The XAxis is aligned with the curve normal and the YAxis is aligned with the curve tangent at this point
            </summary>
            <param name="param">The parameter at which to evaluate</param>
            <returns>The aligned CoordinateSystem at the point</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.HorizontalFrameAtParameter(System.Double)">
            <summary>
            Get a CoordinateSystem with origin at the point at the given parameter
            </summary>
            <param name="param">The parameter at which to evaluate</param>
            <returns>The axis-aligned CoordinateSystem at the point</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.PlaneAtParameter(System.Double)">
            <summary>
            Returns a Plane whose normal aligns with the tangent of the Curve.
            Parameters are adjusted such that 0 is always the start Point
            and 1 is always the end Point.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.PointAtDistance(System.Double)">
            <summary>
            Get a Point at a particular arc length along the curve
            </summary>
            <param name="distance">The distance at which to evaluate</param>
            <returns>The Point at the given distance</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.CoordinateSystemAtDistance(System.Double)">
            <summary>
            Returns a CoordinateSystem at specified distance from Curve start Point.
            Y Axis lies tangent to the Curve, X Axis is the curvature. 
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.PlaneAtDistance(System.Double)">
            <summary>
            Returns a Plane at the specified distance along the Curve from the 
            start Point. The normal of the Plane aligns with the tangent of the 
            Curve.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.DistanceAtParameter(System.Double)">
            <summary>
            Get the arc length along the Curve at the particular parameter.
            </summary>
            <param name="param">The parameter at which to evaluate</param>
            <returns>The arc length</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.ParameterAtDistance(System.Double)">
            <summary>
            Get the parameter at a particular arc length along the curve.
            </summary>
            <param name="distance">The distance at which to evaluate</param>
            <returns>The parameter</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.ParameterAtChordLength(System.Double,System.Double,System.Boolean)">
            <summary>
            Get the parameter at a particular chord length along the curve from given location.
            </summary>
            <param name="distance">The chord length at which to evaluate</param>
            <param name="location">Parameter on the curve to measure from</param>
            <param name="forward">true if move forward along curve  </param>
            <returns>The parameter</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.StartParameter">
            <summary>
            Get the start of the domain in which the curve can be evaluated
            </summary>
            <returns>The start of the domain in which the curve can be evaluated</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.EndParameter">
            <summary>
            Get the end of the domain in which the curve can be evaluated
            </summary>
            <returns>The end of the domain in which the curve can be evaluated</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.LengthBetweenParameters(System.Double,System.Double)">
            <summary>
            Get the arc length between two parameter points on the curve
            </summary>
            <param name="startParam">The start of the domain</param>
            <param name="endParam">The end of the domain</param>
            <returns>The arc length between the two parameters</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.ParameterAtPoint(Autodesk.DesignScript.Interfaces.IPointEntity)">
            <summary>
            Get the parameter at a particular point along the Curve
            </summary>
            <param name="point">A Point along or near the Curve</param>
            <returns>The closest parameter along the curve</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.Reverse">
            <summary>
            Reverse the direction of the curve
            </summary>
            <returns>A new Curve with the opposite direction</returns>
            <search>flip</search>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.Offset(System.Double)">
            <summary>
            Offset a Curve by a specified amount. Curve must be planar, and, if
            a BSplineCurve/NurbsCurve, must have degree > 1.
            </summary>
            <param name="distance">A positive or negative distance to offset</param>
            <returns>new offsetted curves</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.PullOntoPlane(Autodesk.DesignScript.Interfaces.IPlaneEntity)">
            <summary>
            Create a curve by pulling onto plane
            </summary>
            <param name="plane">The plane on which to pull the curve</param>
            <returns>A Curve on the Plane</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.PullOntoSurface(Autodesk.DesignScript.Interfaces.ISurfaceEntity)">
            <summary>
            Pull this Curve onto the input Surface, in the direction of the Surface normals.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.DivideEqually(System.Int32)">
            <summary>
            Divides curve into given number of equal length curves
            </summary>
            <param name="divisions">Number of divisions</param>
            <returns>An Array of Curves after dividing</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.DivideByDistance(System.Int32)">
            <summary>
            Divides curve into given number of curves with equal distances between start and end of each curve (equal chords).
            </summary>
            <param name="divisions">Number of divisions</param>
            <returns>An Array of Curves after dividing</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.DivideByLengthFromParameter(System.Double,System.Double)">
            <summary>
            Divides curve into curves of given length measuring from given location
            </summary>
            <param name="length">Length of  curves after division </param>
            <param name="parameter">Justification location for measuring from </param>
            <returns>An Array of Curves after dividing</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.DivideByDistanceFromParameter(System.Double,System.Double)">
            <summary>
            Divides curve into curves of given distances between start and end (chords) measuring from given location
            </summary>
            <param name="distance">Distance between start and end of each curve after division </param>
            <param name="parameter">Justification location for measuring from </param>
            <returns>An Array of Curves after dividing</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.ParameterTrimStart(System.Double)">
            <summary>
            Removes the start of the Curve at the specified parameter
            </summary>
            <param name="startParameter">The parameter at which to start the trim</param>
            <returns>A new Curve with the start removed</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.ParameterTrimEnd(System.Double)">
            <summary>
            Removes the end of the Curve at the specified parameter
            </summary>
            <param name="endParameter">The parameter at which to start the trim</param>
            <returns>A new Curve with the end removed</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.ParameterTrim(System.Double,System.Double)">
            <summary>
            Removes the beginning and ends of at the specified parameters.
            </summary>
            <param name="startParameter">The parameter at which to start the trim</param>
            <param name="endParameter">The parameter at which to start the trim</param>
            <returns>A new Curve with the outer segments removed</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.ParameterTrimInterior(System.Double,System.Double)">
            <summary>
            Removes the interior portion of a Curve at the specified parameters
            </summary>
            <param name="startParameter">The parameter at which to start the trim</param>
            <param name="endParameter">The parameter at which to start the trim</param>
            <returns>A new Curve with the interior segment removed</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.ParameterTrimSegments(System.Double[])">
            <summary>
            Removes several segments of the curve, discarding the 1st, 3rd, 5th ... segments
            </summary>
            <param name="parameters">A list of parameters at which to split the curve</param>
            <returns>An Array of curves discarding the 1st, 3rd, 5th ... segments</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.ParameterTrimSegments(System.Double[],System.Boolean)">
            <summary>
            Removes several segments of the Curve, disgarding 2nd, 4th, 6th ... segments if the bool is true
            </summary>
            <param name="parameters">A list of parameters at which to split the curve</param>
            <param name="discardEvenSegments">Whether to discard even segments or not</param>
            <returns>An Array of curves disgarding 2nd, 4th, 6th ... segments if the bool is true</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.ParameterSplit(System.Double)">
            <summary>
            Split a Curve into two pieces at the given parameter
            </summary>
            <param name="parameter">The parameter at which to do the split</param>
            <returns>Two Curves remaining after the split</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.ParameterSplit(System.Double[])">
            <summary>
            Split a Curve into multiple pieces at the given parameters
            </summary>
            <param name="parameters">A list of parameters at which to split the curve</param>
            <returns>The two Curves remaining after the split</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.Join(Autodesk.DesignScript.Interfaces.ICurveEntity)">
            <summary>
            Join this curve and the input curve into a new PolyCurve, maintaining the original curves exactly.
            </summary>
            <param name="curve">The curve to join to</param>
            <returns>A PolyCurve made up of the two curves</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.Join(Autodesk.DesignScript.Interfaces.ICurveEntity[])">
            <summary>
            Join set of curves to the start of the end of the polycurve. 
            Flips curves to assure connectivity.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.Extrude(System.Double)">
            <summary>
            Extrudes a Curve in the normal Vector direction
            </summary>
            <param name="distance">The distance to extrude the curve</param>
            <returns>The extruded Surface</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.Extrude(Autodesk.DesignScript.Interfaces.IVectorEntity)">
            <summary>
            Extrudes a Curve in the specified direction, by the length of the input Vector
            </summary>
            <param name="direction">Vector to extrude along </param>
            <returns>The extruded Surface</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.Extrude(Autodesk.DesignScript.Interfaces.IVectorEntity,System.Double)">
            <summary>
            Extrudes a Curve in the specified direction, by the specified distance
            </summary>
            <param name="direction">Vector to extrude along </param>
            <param name="distance">Distance to extrude </param>
            <returns>The extruded Surface</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.ExtrudeAsSolid(System.Double)">
            <summary>
            Extrudes a Curve in the Normal direction by the specified distance. Curve must be closed.
            </summary>
            <param name="distance">Distance to extrude </param>
            <returns>The extruded Solid</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.ExtrudeAsSolid(Autodesk.DesignScript.Interfaces.IVectorEntity)">
            <summary>
            Extrudes a Curve in the specified direction, by the length of the input Vector. Curve must be closed.
            </summary>
            <param name="direction">Vector to extrude along </param>
            <returns>The extruded Solid</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.ExtrudeAsSolid(Autodesk.DesignScript.Interfaces.IVectorEntity,System.Double)">
            <summary>
            Extrudes a Curve in the specified direction, by the specified distance. Curve must be closed.
            </summary>
            <param name="direction">Vector to extrude along </param>
            <param name="distance">Distance to extrude </param>
            <returns>The extruded Solid</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.Extend(System.Double,Autodesk.DesignScript.Interfaces.IPointEntity)">
            <summary>
            Extend a Curve by a given distance at a particular end determined by a pick Point.  The picked side will be extended.  Closed curves like Circles and Ellipses cannot be extended.
            </summary>
            <param name="distance">Distance to extend</param>
            <param name="pickSide">A Point on the end to extend</param>
            <returns>The extended Curve</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.ExtendStart(System.Double)">
            <summary>
            Extend a Curve by a given distance on its start side.  Closed curves like Circles and Ellipses cannot be extended.
            </summary>
            <param name="distance">Distance to extend</param>
            <returns>The extended Curve</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.ExtendEnd(System.Double)">
            <summary>
            Extend a Curve by a given distance on its end.  Closed curves like Circles and Ellipses cannot be extended.
            </summary>
            <param name="distance">Distance to extend</param>
            <returns>The extended Curve</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.ApproximateWithArcAndLineSegments">
            <summary>
            Approximate a Curve with a collection of Arcs and Lines
            </summary>
            <returns>An Array of Arcs and Lines approximating the curve</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.ToNurbsCurve">
            <summary>
            Converts the Curve to a NurbsCurve approximation
            </summary>
            <returns>A NurbsCurve approximating the Curve</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.Patch">
            <summary>
            Patch a closed Curve
            </summary>
            <returns>A Surface on the interior of the curve the Curve </returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.Project(Autodesk.DesignScript.Interfaces.IGeometryEntity,Autodesk.DesignScript.Interfaces.IVectorEntity)">
            <summary>
            Project another piece of Geometry onto this along a given direction Vector
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.SweepAsSurface(Autodesk.DesignScript.Interfaces.ICurveEntity)">
            <summary>
            Sweeps this Curve along the path Curve, creating a Surface
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.SweepAsSolid(Autodesk.DesignScript.Interfaces.ICurveEntity)">
            <summary>
            Sweeps this closed Curve along the path Curve, creating a Solid
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICurveEntity.Simplify(System.Double)">
            <summary>
            Returns a new Curve approximated with the supplied tolerance
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ICurveEntity.Length">
            <summary>
            The total arc length of the curve
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ICurveEntity.IsPlanar">
            <summary>
            Determine whether a Curve is planar or not
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ICurveEntity.IsClosed">
            <summary>
            Determine if the Curve is closed or not
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ICurveEntity.StartPoint">
            <summary>
            Get the start Point along the Curve
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ICurveEntity.EndPoint">
            <summary>
            Get the end Point along the Curve
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ICurveEntity.Normal">
            <summary>
            The normal to the plane where the curve is contained.  Only
            valid for planar curves.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ILineEntity.Direction">
            <summary>
            The direction of the Curve
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IHelixEntity.Angle">
            <summary>
            The angle in degrees through which the Helix turns over its length
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IHelixEntity.Pitch">
            <summary>
            The pitch of the helix in Degrees
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IHelixEntity.Radius">
            <summary>
            The radius of the arc
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IHelixEntity.AxisDirection">
            <summary>
            The direction of the axis of the Helix
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IHelixEntity.AxisPoint">
            <summary>
            The base point of the Helix axis
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ICircleEntity.CenterPoint">
            <summary>
            The center of the circle
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ICircleEntity.Radius">
            <summary>
            The radius of the circle
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IEllipseArcEntity.CenterPoint">
            <summary>
            The center of the Ellipse
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IEllipseArcEntity.MajorAxis">
            <summary>
            The major axis of the Ellipse.  This is the longer axis.  The length of the Vector is the Major radius.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IEllipseArcEntity.MinorAxis">
            <summary>
            The minor axis of the Ellipse.  This is the shorter axis.  The length of the Vector is the Minor radius.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IEllipseArcEntity.StartAngle">
            <summary>
            The start angle in degrees
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IEllipseArcEntity.SweepAngle">
            <summary>
            The total sweep angle in degrees
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IEllipseEntity.CenterPoint">
            <summary>
            The center of the Ellipse
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IEllipseEntity.MajorAxis">
            <summary>
            The major axis of the Ellipse.  This is the longer axis.  The length of the Vector is the Major radius.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IEllipseEntity.MinorAxis">
            <summary>
            The minor axis of the Ellipse.  This is the shorter axis.  The length of the Vector is the Minor radius.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IArcEntity.CenterPoint">
            <summary>
            The center point of the arc
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IArcEntity.Radius">
            <summary>
            The radius of the arc
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IArcEntity.StartAngle">
            <summary>
            The start angle in degrees
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IArcEntity.SweepAngle">
            <summary>
            The total sweep angle in degrees
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.INurbsCurveEntity.ControlPoints">
            <summary>
            Get the control points of the NurbsCurve.  These are the points that the curve interpolates.
            </summary>
            <returns>An Array of Points</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.INurbsCurveEntity.Knots">
            <summary>
            The knots of the Curve.  These, along with the Degree, define the domain of the Curve where a particular control vertex acts.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.INurbsCurveEntity.Weights">
            <summary>
            The weights of the control vertices of the curve.  These define the magnitude of influence of the control vertices.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.INurbsCurveEntity.Degree">
            <summary>
            The degree of the curve
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.INurbsCurveEntity.IsPeriodic">
            <summary>
            Whether the NurbsCurve is periodic or not
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.INurbsCurveEntity.IsRational">
            <summary>
            Whether the NurbsCurve is rational or not.  This defines whether any of the weights are not 1.0.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPolyCurveEntity.Curves">
            <summary>
            Returns curves of the polycurve
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPolyCurveEntity.CurveAtIndex(System.Int32,System.Boolean)">
            <summary>
            Returns curve of the polycurve by index
            </summary>
            <param name="index">Length to locate point</param>
            <param name="endOrStart"> counting from end or start of the polycurve </param>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPolyCurveEntity.BasePlane">
            <summary>
            Returns plane of planar polycurve
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPolyCurveEntity.ExtendWithEllipse(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Extends polycurve by tangent ellipse
            </summary>
            <param name="length">Length of extension ellipse </param>
            <param name="radius1">Parameter of ellipse </param>
            <param name="radius2">Parameter of ellipse </param>
            <param name="endEllipseParameter">Parameter of ellipse </param>
            <param name="endOrStart"> extending end or start of the polycurve </param>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPolyCurveEntity.ExtendWithArc(System.Double,System.Double,System.Boolean)">
            <summary>
            Extends polycurve by tangent ellipse
            </summary>
            <param name="length">Length of extension arc </param>
            <param name="radius">Radius of arc </param>
            <param name="endOrStart"> extending end or start of the polycurve </param>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPolyCurveEntity.CloseWithLine">
            <summary>
            Close polycurve by line connecting start and end points
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPolyCurveEntity.CloseWithLineAndTangentArcs(System.Double,System.Double)">
            <summary>
            Close polycurve by tangent chain of arc, line, and arc
            </summary>
            <param name="radiusAtStart">Radius of arc at start of polycurve</param> 
            <param name="radiusAtEnd">Radius of arc at end of polycurve</param> 
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPolyCurveEntity.Offset(System.Double,System.Boolean)">
            <summary>
            Offset polycurve in its plane.
            </summary>
            <param name="signedDistance">Signed offset</param> 
            <param name="extendCircular">If true, corners will be made circular</param> 
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPolyCurveEntity.Fillet(System.Double,System.Boolean)">
            <summary>
            Fillet polycurve in its plane.
            </summary>
            <param name="radius">Radius of fillet</param> 
            <param name="rightSide">If right side which to fillet</param> 
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IPolyCurveEntity.NumberOfCurves">
            <summary>
            Number if curves of the polycurve
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPolygonEntity.Corners">
            <summary>
            Returns corners of polygon
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPolygonEntity.Center">
            <summary>
            Returns average point of corners of polygon
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPolygonEntity.SelfIntersections">
            <summary>
            Returns self intersections between sides of the polygon.
            </summary>
            
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPolygonEntity.ContainmentTest(Autodesk.DesignScript.Interfaces.IPointEntity)">
            <summary>
            Checks if point is inside planar polygon without self intersections.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IPolygonEntity.Points">
            <summary>
            Returns all the segment start / end points.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IPolygonEntity.PlaneDeviation">
            <summary>
            Returns maximum deviation from average plane of polygon.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IRectangleEntity.Width">
            <summary>
            The width of the Rectangle
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IRectangleEntity.Height">
            <summary>
            The height of the Rectangle
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ITopologyEntity.Vertices">
            <summary>
            The Vertices of the Topology
            </summary>
            <returns></returns>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ITopologyEntity.Edges">
            <summary>
            The Edges of the Topology
            </summary>
            <returns></returns>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ITopologyEntity.Faces">
            <summary>
            The Edges of the Topology
            </summary>
            <returns></returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ISurfaceEntity.SubtractFrom(Autodesk.DesignScript.Interfaces.ISolidEntity)">
            <summary>
            Subtract the input tools from this Surface.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ISurfaceEntity.UVParameterAtPoint(Autodesk.DesignScript.Interfaces.IPointEntity)">
            <summary>
            Return the UV parameter pair at the input Point. This is the inverse of Point at parameter.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ISurfaceEntity.TrimWithEdgeLoops(Autodesk.DesignScript.Interfaces.IPolyCurveEntity[])">
            <summary>
            Trim the surface with a collection of loops within the surface
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ISurfaceEntity.NormalAtPoint(Autodesk.DesignScript.Interfaces.IPointEntity)">
            <summary>
            Return the surface normal at the input Point on the Surface.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ISurfaceEntity.ToNurbsSurface">
            <summary>
            Gets a Nurbs representation of the Surface. This method may approximate
            Surface in certain circumstances.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ISurfaceEntity.ApproximateWithTolerance(System.Double)">
            <summary>
            Gets a Nurbs representation of the Surface within a specified tolerance. This method may approximate
            Surface in certain circumstances.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ISurfaceEntity.Thicken(System.Double)">
            <summary>
            Thicken Surface into a Solid, extruding in the direction of Surface 
            normals on both sides of the Surface.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ISurfaceEntity.Thicken(System.Double,System.Boolean)">
            <summary>
            Thicken Surface into a Solid, extruding in the direction of Surface 
            normals. If both_sides parameter is true, surface is thickened 
            on both sides.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ISurfaceEntity.Offset(System.Double)">
            <summary>
            Offset Surface in direction of Surface normal by specified distance.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ISurfaceEntity.CurvatureAtParameter(System.Double,System.Double)">
            <summary>
            The returned coordination system use xAxis, yAxis and zAxis to represent the uDir, vDir and normal.
            The length of xAxis, yAxis represents the curvatures.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ISurfaceEntity.CoordinateSystemAtParameter(System.Double,System.Double)">
            <summary>
            Return a CoordinateSystem aligned with principal curvature directions.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ISurfaceEntity.TangentAtUParameter(System.Double,System.Double)">
            <summary>
            Return the U tangent Vector at specified U and V parameters.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ISurfaceEntity.TangentAtVParameter(System.Double,System.Double)">
            <summary>
            Return the V tangent Vector at specified U and V parameters.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ISurfaceEntity.NormalAtParameter(System.Double,System.Double)">
            <summary>
            Return the normal Vector at specified U and V parameters.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ISurfaceEntity.DerivativesAtParameter(System.Double,System.Double)">
            <summary>
            Return the derivatives at input U and V coordinates.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ISurfaceEntity.GaussianCurvatureAtParameter(System.Double,System.Double)">
            <summary>
            Returns the Gaussian curvature at V and V parameters.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ISurfaceEntity.PrincipalCurvaturesAtParameter(System.Double,System.Double)">
            <summary>
            Returns the principal curvatures at the U and V parameters.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ISurfaceEntity.PrincipalDirectionsAtParameter(System.Double,System.Double)">
            <summary>
            Returns principal direction vectors at U and V parameters.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ISurfaceEntity.PointAtParameter(System.Double,System.Double)">
            <summary>
            Return the Point at specified U and V parameters.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ISurfaceEntity.PerimeterCurves">
            <summary>
            Return all the boundary Curves of the Surface.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ISurfaceEntity.GetIsoline(System.Int32,System.Double)">
             <summary>
             Create a parameter line curve on the given surface.
            
             Create a Curve that represents a u or v parameter line on the Surface. A 
             parameter line runs in the direction of increasing u or v parameter at a 
             constant opposite u or v parameter. The resulting Curve will match the 
             Surface parameterisation and its range will be bounded by the Surface 
             parameter range. The type of Curve returned will depend on the Surface 
             type.
             </summary>
             <param name="isoDirection">If direction == 0, creates a U parameter line, if direction == 1, creates a V parameter line.</param>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ISurfaceEntity.FlipNormalDirection">
            <summary>
            Returns a new Surface with the Normal flipped. Leaves this surface
            unchanged.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ISurfaceEntity.Join(Autodesk.DesignScript.Interfaces.ISurfaceEntity)">
            <summary>
            Combines this Surface and input Surface into a PolySurface
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ISurfaceEntity.Join(Autodesk.DesignScript.Interfaces.ISurfaceEntity[])">
            <summary>
            Combines this Surface and input Surfaces into a PolySurface
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ISurfaceEntity.ProjectInputOnto(Autodesk.DesignScript.Interfaces.IGeometryEntity,Autodesk.DesignScript.Interfaces.IVectorEntity)">
            <summary>
            Projects the input Geometry onto this Surface in the input Vector direction
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ISurfaceEntity.Area">
            <summary>
            Returns the total surface area.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ISurfaceEntity.Perimeter">
            <summary>
            Returns the sum of all edges of the Surface.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ISurfaceEntity.ClosedInU">
            <summary>
            Returns true if the Surface is closed in U direction.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ISurfaceEntity.ClosedInV">
            <summary>
            Returns true if the Surface is closed in V direction
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ISurfaceEntity.Closed">
            <summary>
            Returns true if the Surface is closed in U or V directions
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.INurbsSurfaceEntity.ControlPoints">
            <summary>
            Returns NurbsSurface control points (poles).
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.INurbsSurfaceEntity.Weights">
            <summary>
            Returns NurbsSurface control point weigths.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.INurbsSurfaceEntity.UKnots">
            <summary>
             Surface knots in U direction.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.INurbsSurfaceEntity.VKnots">
            <summary>
            Surface knots in V direction.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.INurbsSurfaceEntity.DegreeU">
            <summary>
            Surface degree in the U direction.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.INurbsSurfaceEntity.DegreeV">
            <summary>
            Surface degree in the V direction. 
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.INurbsSurfaceEntity.NumControlPointsU">
            <summary>
            Number of control Points in the U direction.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.INurbsSurfaceEntity.NumControlPointsV">
            <summary>
            Number of control Points in the V direction. 
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.INurbsSurfaceEntity.IsPeriodicInU">
            <summary>
            Returns true if the Surface is periodic in the U direction. 
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.INurbsSurfaceEntity.IsPeriodicInV">
            <summary>
            Returns true if the Surface is periodic in the V direction. 
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.INurbsSurfaceEntity.IsRational">
            <summary>
            Returns true if the Surface is rational.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPlaneEntity.ToCoordinateSystem">
            <summary>
            Produces a new CoordinateSystem representing this plane. It is based on 
            the origin, and X and Y axis basis.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPlaneEntity.Offset(System.Double)">
            <summary>
            Create a new Plane offset by this Plane in the normal direction by
            the specified distance.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IPlaneEntity.Origin">
            <summary>
            Returns the origin of the Plane.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IPlaneEntity.Normal">
            <summary>
            Returns the normal direction of the Plane.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IPlaneEntity.XAxis">
            <summary>
            The X basis of the Plane
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IPlaneEntity.YAxis">
            <summary>
            The Y basis of the Plane
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPolySurfaceEntity.Surfaces">
            <summary>
            Return new Surfaces representing the underlying Surfaces.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPolySurfaceEntity.LocateSurfacesByPoint(Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IVectorEntity)">
            <summary>
            Locate Surfaces by point. Takes first intersection in forward direction. 
            Returns one surface if hit  surface interior, two if hit edge interior, and many if hit vertex 
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPolySurfaceEntity.LocateSurfacesByLine(Autodesk.DesignScript.Interfaces.ILineEntity)">
            <summary>
            Locate Surfaces by Line. Takes all surfaces hit by line.  
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPolySurfaceEntity.UnconnectedBoundaries">
            <summary>
            Compute 2d cell boundaries which are not connected to other Surfaces
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPolySurfaceEntity.ExtractSolids">
             <summary>
            Extract Solids from Polysurface defined by subset of surfaces
             </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPolySurfaceEntity.SurfaceCount">
             <summary>
            number of surfaces of Polysurface
             </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPolySurfaceEntity.EdgeCount">
             <summary>
            number of edges of Polysurface
             </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPolySurfaceEntity.VertexCount">
             <summary>
            number of vertices of Polysurface
             </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPolySurfaceEntity.Fillet(Autodesk.DesignScript.Interfaces.IEdgeEntity[],System.Double)">
            <summary>
            Fillets a Solid along input Edges with a given radius.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPolySurfaceEntity.Chamfer(Autodesk.DesignScript.Interfaces.IEdgeEntity[],System.Double)">
            <summary>
            Chamfers a Solid along input Edges with a given offset from the edge corner.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ISolidEntity.Centroid">
            <summary>
            The centroid of the Solid
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ISolidEntity.Union(Autodesk.DesignScript.Interfaces.ISolidEntity)">
            <summary>
            The boolean union of this Solid and another.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ISolidEntity.UnionAll(Autodesk.DesignScript.Interfaces.ISolidEntity[])">
            <summary>
            Unions a list of Solids with this Solid.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ISolidEntity.Difference(Autodesk.DesignScript.Interfaces.ISolidEntity)">
            <summary>
            The boolean difference of this Solid with another
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ISolidEntity.DifferenceAll(Autodesk.DesignScript.Interfaces.ISolidEntity[])">
            <summary>
            The boolean difference of this Solid and the union of input Solids
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ISolidEntity.ThinShell(System.Double,System.Double)">
            <summary>
            Obtain a solid Shell from the Faces of this Solid
            </summary>
            <param name="internalFaceThickness">Distance to extend the shell inwards</param>
            <param name="externalFaceThickness">Distance to extend she shell outwards</param>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ISolidEntity.ProjectInputOnto(Autodesk.DesignScript.Interfaces.IGeometryEntity,Autodesk.DesignScript.Interfaces.IVectorEntity)">
            <summary>
            Projects the input Geometry onto this Solid, in the direction of the input Vector
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ISolidEntity.Fillet(Autodesk.DesignScript.Interfaces.IEdgeEntity[],System.Double)">
            <summary>
            Fillets a Solid along input Edges with a given radius.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ISolidEntity.Chamfer(Autodesk.DesignScript.Interfaces.IEdgeEntity[],System.Double)">
            <summary>
            Chamfers a Solid along input Edges with a given offset from the edge corner.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ISolidEntity.Area">
            <summary>
            Returns the surface area -- sum of all the areas of all faces
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ISolidEntity.Volume">
            <summary>
            The total volume of the Solid
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IConeEntity.StartPoint">
            <summary>
            The start point
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IConeEntity.EndPoint">
            <summary>
            The end point
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IConeEntity.RadiusRatio">
            <summary>
            Ratio between the top and bottom radius
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IConeEntity.StartRadius">
            <summary>
            The radius at the base
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IConeEntity.EndRadius">
            <summary>
            The radius at the bottom
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IConeEntity.Height">
            <summary>
            The total height
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ICylinderEntity.Radius">
            <summary>
            The radius of the Cylinder
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ICuboidEntity.Length">
             <summary>
             Returns length distance.
            
             Note: This return the input dimensions of the Cuboid, NOT the
                   actual world space dimensions. In other words, if you create a Cuboid
                   width (X-axis) length 10, and transform it to a CoordinateSystem with
                   2 times scaling in X, the width will still be 10. ASM does not allow you
                   to extract the Vertices of a body in any predictable order, so it 
                   impossible to determine the dimensions after a transform. 
             </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ICuboidEntity.Width">
             <summary>
             Returns width distance.
            
             Note: This return the input dimensions of the Cuboid, NOT the
                   actual world space dimensions. In other words, if you create a Cuboid
                   width (X-axis) length 10, and transform it to a CoordinateSystem with
                   2 times scaling in X, the width will still be 10. ASM does not allow you
                   to extract the Vertices of a body in any predictable order, so it 
                   impossible to determine the dimensions after a transform. 
             </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ICuboidEntity.Height">
             <summary>
             Returns height distance.
            
             Note: This return the input dimensions of the Cuboid, NOT the
                   actual world space dimensions. In other words, if you create a Cuboid
                   width (X-axis) length 10, and transform it to a CoordinateSystem with
                   2 times scaling in X, the width will still be 10. ASM does not allow you
                   to extract the Vertices of a body in any predictable order, so it 
                   impossible to determine the dimensions after a transform. 
             </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ISphereEntity.CenterPoint">
            <summary>
            Return the center Point of the Sphere.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ISphereEntity.Radius">
            <summary>
            Return the radius of the Sphere.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IFaceEntity.SurfaceGeometry">
            <summary>
            The underlying Surface making up the Face
            </summary>
            <returns></returns>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IFaceEntity.Edges">
            <summary>
            All of the Edges around this Face in counterclockwise order
            </summary>
            <returns></returns>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IFaceEntity.Vertices">
            <summary>
            All of the Vertices around this Face in counterclockwise order
            </summary>
            <returns></returns>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IVertexEntity.PointGeometry">
            <summary>
            The Point where this Vertex is located
            </summary>
            <returns></returns>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IVertexEntity.AdjacentEdges">
            <summary>
            The Edges emanating from this Vertex
            </summary>
            <returns></returns>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IVertexEntity.AdjacentFaces">
            <summary>
            The Faces adjacent to this Vertex
            </summary>
            <returns></returns>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IEdgeEntity.CurveGeometry">
            <summary>
            The underlying Curve making up the Edge
            </summary>
            <returns></returns>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IEdgeEntity.AdjacentFaces">
            <summary>
            The Faces adjacent to this Edge
            </summary>
            <returns></returns>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IEdgeEntity.StartVertex">
            <summary>
            The Vertex at which this Edge starts
            </summary>
            <returns></returns>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IEdgeEntity.EndVertex">
            <summary>
            The Vertex at which this Edge ends
            </summary>
            <returns></returns>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IMeshEntity.FaceIndices">
            <summary>
            The vertex indices that make up each face in a counterclockwise fashion
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IMeshEntity.VertexNormals">
            <summary>
            The normal vector at this vertex
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IMeshEntity.VertexPositions">
            <summary>
            The positions of the vertices
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IShellEntity.SolidGeometry">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IShellEntity.Faces">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IShellEntity.FaceCount">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ITextEntity.GetEncoding">
            <summary>
            Gets the encoding of the underlying text
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.ITextEntity.Height">
            <summary>
            Returns the height in absolute units;
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICellEntity.SolidGeometry">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICellEntity.Faces">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICellEntity.Centroid">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICellEntity.Area">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICellEntity.Volume">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICellEntity.AdjacentCells">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICellEntity.FaceCount">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICellFaceEntity.CellGeometry">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.ICellFaceEntity.FaceGeometry">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.ArcByThreePoints(Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IPointEntity)">
            <summary>
            Create an arc by providing three sequential points along its circumference.
            </summary>
            <param name="firstPoint">First point along the curve</param>
            <param name="secondPoint">Second point along the curve</param>
            <param name="thirdPoint">Third point along the curve</param>
            <returns>An Arc</returns>
            <search>arc</search>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.ArcByCenterPointRadiusAngle(Autodesk.DesignScript.Interfaces.IPointEntity,System.Double,System.Double,System.Double,Autodesk.DesignScript.Interfaces.IVectorEntity)">
            <summary>
            Create an arc by providing it's center point, radius, angle sweep, and normal vector
            </summary>
            <param name="center">The center of the arc</param>
            <param name="radius">Radius of the arc</param>
            <param name="startAngle">Start angle in degrees</param>
            <param name="endAngle">End angle in degrees</param>
            <param name="normal">A vector defining the normal of the arc</param>
            <returns>An Arc</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.ArcByCenterPointStartPointSweepAngle(Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IPointEntity,System.Double,Autodesk.DesignScript.Interfaces.IVectorEntity)">
            <summary>
            Create an arc by providing it's center point, start point, sweep point, and normal
            </summary>
            <param name="centerPoint">The center of the arc</param>
            <param name="startPoint">The start point on the arc</param>
            <param name="sweepAngle">The angle to sweep out</param>
            <param name="normal">The normal to the arc</param>
            <returns>An Arc</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.ArcByCenterPointStartPointEndPoint(Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IPointEntity)">
            <summary>
            Create an arc by providing it's center point, start point, and end point
            </summary>
            <param name="centerPoint">The center of the arc</param>
            <param name="startPoint">The start point on the arc</param>
            <param name="endPoint">The end point of the arc</param>
            <returns>An Arc</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.ArcByFillet(Autodesk.DesignScript.Interfaces.ICurveEntity,Autodesk.DesignScript.Interfaces.ICurveEntity,System.Double)">
            <summary>
            Create an arc by filleting twp curves with given radius
            </summary>
            <param name="curve1">First curve</param>
            <param name="curve2">Second curve</param>
            <param name="radius">The radius of the fillet arc</param>
            <returns>An Arc</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.ArcByFilletTangentToCurve(Autodesk.DesignScript.Interfaces.ICurveEntity,Autodesk.DesignScript.Interfaces.ICurveEntity,Autodesk.DesignScript.Interfaces.ICurveEntity)">
            <summary>
            Create an arc by filleting two curves tangent to given curve at internal point
            </summary>
            <param name="curve1">First curve</param>
            <param name="curveTangentTo">curve to which the fillet arc is tangent at internal point </param>
            <param name="curve2">Second curve</param>
            <returns>An Arc</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.ArcByBestFitThroughPoints(Autodesk.DesignScript.Interfaces.IPointEntity[])">
            <summary>
            best fit arc through points
            </summary>
            <param name="points">Points to fit</param> 
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.ArcByStartEndAndTangencies(Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IVectorEntity,Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IVectorEntity)">
            <summary>
            Create an arc or tangent bi arc by start and end points and tangencies at start and end 
            </summary>
            <param name="point1"> Point for the start of bi-arc </param> 
            <param name="vector1"> Tangent vector for the start of bi-arc </param>
            <param name="point2"> Point for the end of bi-arc </param> 
             <param name="vector2"> Tangent vector for the end of bi-arc </param>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.ArcByStartPointEndPointStartTangent(Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IVectorEntity)">
            <summary>
            Create an Arc from start Point to end Point with start tangent to Vector
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.BoundingBoxByGeometry(Autodesk.DesignScript.Interfaces.IGeometryEntity)">
            <summary>
            Create an axis-aligned BoundingBox around input Geometry.
            </summary>
            <search>bounding</search>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.BoundingBoxByGeometry(Autodesk.DesignScript.Interfaces.IGeometryEntity[])">
            <summary>
            Create an axis-aligned BoundingBox around input Geometries.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.BoundingBoxByGeometryCoordinateSystem(Autodesk.DesignScript.Interfaces.IGeometryEntity,Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity)">
            <summary>
            Create a non-axis-aligned BoundingBox around input Geometry, oriented
            in the X, Y, and Z axis of the CoordinateSystem.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.BoundingBoxByGeometryCoordinateSystem(Autodesk.DesignScript.Interfaces.IGeometryEntity[],Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity)">
            <summary>
            Create a non-axis-aligned BoundingBox around input Geometries, oriented
            in the X, Y, and Z axis of the CoordinateSystem.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.BoundingBoxByCorners(Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IPointEntity)">
            <summary>
            Creates the an axis-aligned BoundingBox spanning between the minimum Point and the maximum Point.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.BoundingBoxByCornersCoordinateSystem(Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity)">
            <summary>
            Constructs a BoundingBox from minimum coordinates (lower-left-rear corner of the box),
            to maximum coordinates (upper-right-front corner of the box). CoordinateSystem
            is the transform FROM the coordinate space of the box TO the model space.
            
            This method is designed to match Revit's API, allowing you to extract out the parameters
            from a Revit BoundingBox without any conversions.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.CircleByCenterPointRadius(Autodesk.DesignScript.Interfaces.IPointEntity,System.Double)">
            <summary>
            Creates a Circle with input center Point and radius in the world XY
            plane, with world Z as normal.
            </summary>
            <search>circle</search>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.CircleByCenterPointRadiusNormal(Autodesk.DesignScript.Interfaces.IPointEntity,System.Double,Autodesk.DesignScript.Interfaces.IVectorEntity)">
            <summary>
            Creates a Circle with specified center Point, radius, and normal direction.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.CircleByPlaneRadius(Autodesk.DesignScript.Interfaces.IPlaneEntity,System.Double)">
            <summary>
            Create a Circle centered at the input Plane origin (root), lying in 
            the input Plane, with given radius.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.CircleByThreePoints(Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IPointEntity)">
            <summary>
            Create a Circle passing through three input Points.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.CircleByBestFitThroughPoints(Autodesk.DesignScript.Interfaces.IPointEntity[])">
            <summary>
            Best fit Circle through Points
            </summary>
            <param name="points">Points to fit</param> 
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.ConeByPointsRadius(Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IPointEntity,System.Double)">
            <summary>
            Create a Cone with given base radius at start Point, extending to a 
            apex at end Point.
            </summary>
            <search>cone</search>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.ConeByPointsRadii(Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IPointEntity,System.Double,System.Double)">
            <summary>
            Create a Cone with axis from start Point to end Point, with given 
            radiuses at start and end. This object does not have an apex, and
            can be thought of as a trimmed Cone.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.ConeByCoordinateSystemHeightRadius(Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity,System.Double,System.Double)">
            <summary>
            Creates a Cone with base Point at CoordinateSystem origin, extending
            in the CoordinateSystem Z axis deriction length amount, with a 
            circular base in the CoordinateSystem XY Plane.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.ConeByCoordinateSystemHeightRadii(Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity,System.Double,System.Double,System.Double)">
            <summary>
            Creates a Cone with base Point at CoordinateSystem origin, extending
            in the CoordinateSystem Z axis deriction length amount, with a 
            circular bases in the CoordinateSystem XY Plane. 
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.CylinderByRadiusHeight(Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity,System.Double,System.Double)">
            <summary>
            Construct a Solid Cylinder defined by a parent CoordinateSystem, the radius, and the height of the cylinder
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.CylinderByPointsRadius(Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IPointEntity,System.Double)">
            <summary>
            Construct a Solid Cylinder given the bottom and top center point of the Cylinder.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.CoordinateSystemIdentity">
            <summary>
            Creates a CoordinateSystem as the World Coordinate System: origin at 
            0, 0, 0; x axis at 1, 0, 0; y axis at 0, 1, 0; z axis at 0, 0, 1
            </summary>
            <search>zero,wcs</search>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.CoordinateSystemByMatrix(System.Double[])">
            <summary>
            Deprecated -- DO NOT USE
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.CoordinateSystemByOrigin(System.Double,System.Double)">
            <summary>
            Create a CoordinateSystem with origin at X and Y locations, with
            X and Y Axes set as WCS X and Y Axes. Z defaults to 0.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.CoordinateSystemByOrigin(System.Double,System.Double,System.Double)">
            <summary>
            Create a CoordinateSystem with origin at X, Y, and Z locations, with
            X and Y Axes set as WCS X and Y Axes.
            </summary>
            <search>translate</search>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.CoordinateSystemByOrigin(Autodesk.DesignScript.Interfaces.IPointEntity)">
            <summary>
            Create a CoordinateSystem with origin at input Point, with X and Y Axes
            set as WCS X and Y Axes.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.CoordinateSystemByPlane(Autodesk.DesignScript.Interfaces.IPlaneEntity)">
            <summary>
            Create a CoordinateSystem with origin equal to input Plane origin, and 
            X and Y axes lying in the Plane, aligned with Plane X and Y axes.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.CoordinateSystemByOriginVectors(Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IVectorEntity,Autodesk.DesignScript.Interfaces.IVectorEntity)">
            <summary>
            Create a CoordinateSystem at the origin with X and Y axis. 
            Input Vectors are normalized before creating the CoordinateSystem.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.CoordinateSystemByOriginVectors(Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IVectorEntity,Autodesk.DesignScript.Interfaces.IVectorEntity,Autodesk.DesignScript.Interfaces.IVectorEntity)">
            <summary>
            Create a CoordinateSystem at the origin with X and Y axis, with Z
            axis ignored completely. Input Vectors are normalized before creating 
            the CoordinateSystem. 
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.CoordinateSystemByCylindricalCoordinates(Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity,System.Double,System.Double,System.Double)">
            <summary>
            http://adsk-oss.myjetbrains.com/youtrack/issue/MAGN-1407
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.CoordinateSystemBySphericalCoordinates(Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity,System.Double,System.Double,System.Double)">
            <summary>
            http://adsk-oss.myjetbrains.com/youtrack/issue/MAGN-1408
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.CuboidByLengths(System.Double,System.Double,System.Double)">
            <summary>
            Create a Cuboid centered at WCS origin, with width, length, and height.
            </summary>
            <search>box</search>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.CuboidByLengths(Autodesk.DesignScript.Interfaces.IPointEntity,System.Double,System.Double,System.Double)">
            <summary>
            Create a Cuboid centered at input Point, with specified width, length, 
            and height.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.CuboidByLengths(Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity,System.Double,System.Double,System.Double)">
            <summary>
            Create a Cuboid centered and oriented to input CoordinateSystem, with 
            specified width, length, and height.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.CuboidByCorners(Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IPointEntity)">
            <summary>
            Create an Cuboid spanning from low Point to high Point.
            </summary>
            <search>box</search>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.CurveByParameterLineOnSurface(Autodesk.DesignScript.Interfaces.ISurfaceEntity,Autodesk.DesignScript.Interfaces.IUVEntity,Autodesk.DesignScript.Interfaces.IUVEntity)">
            <summary>
            Create a curve by line of surface in uv space 
            </summary>
            <param name="baseSurface"> Surface to use </param> 
            <param name="startParams"> Starting uv at which curve will start </param>
            <param name="endParams"> Ending uv at which curve will end </param> 
            <search>isocurve</search>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.CurveByBlendBetweenCurves(Autodesk.DesignScript.Interfaces.ICurveEntity,Autodesk.DesignScript.Interfaces.ICurveEntity,System.Boolean,System.Boolean)">
            <summary>
            Create a curve by line of surface in uv space 
            </summary>
            <param name="curve1"> First curve to blend </param> 
            <param name="curve2"> Second curve to blend </param>
            <param name="endOrStart1"> flag to indicate which end of curve1 to blend </param> 
            <param name="endOrStart2"> flag to indicate which end of curve1 to blend </param>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.CurveByIsoCurveOnSurface(Autodesk.DesignScript.Interfaces.ISurfaceEntity,System.Int32,System.Double)">
            <summary>
            Create a curve by isoline of surface 
            </summary>
            <param name="baseSurface"> Base surface </param> 
            <param name="direction"> if 0 isoline is along u direction, if 1 along v direction </param>
            <param name="parameter"> fixed for the curve value of other surface parameter </param> 
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.EllipseArcByPlaneRadiiStartAngleSweepAngle(Autodesk.DesignScript.Interfaces.IPlaneEntity,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create an EllipseArc in a plane with the given the radii along the X and Y axes and the angles to sweep through
            </summary>
            <param name="plane">The plane the EllipseArc is contained in</param>
            <param name="xRadius">The radius of the EllipseArc in the X direction of the Plane</param>
            <param name="yRadius">The radius of the EllipseArc in the Y direction of the Plane</param>
            <param name="startAngle">The start angle of the arc in degrees</param>
            <param name="sweepAngle">The angle to sweep from the start angle in degrees</param>
            <returns></returns>
            <search>ellipsearc</search>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.EllipseByOriginRadii(Autodesk.DesignScript.Interfaces.IPointEntity,System.Double,System.Double)">
            <summary>
            Create an Ellipse centered at input Point, aligned with WCS XY Plane,
            with specified X and Y axis radii.
            </summary>
            <search>ellipse</search>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.EllipseByOriginVectors(Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IVectorEntity,Autodesk.DesignScript.Interfaces.IVectorEntity)">
            <summary>
            Create an Ellipse centered at input Point, with two specified axes. 
            Axes should be be at 90 degrees to each other.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.EllipseByCoordinateSystemRadii(Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity,System.Double,System.Double)">
            <summary>
            Create an Ellipse centered and aligned with input CoordinateSystem, 
            with a x_radius radius in the CS X direction, and y_radius radius in the 
            CS Y direction.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.EllipseByPlaneRadii(Autodesk.DesignScript.Interfaces.IPlaneEntity,System.Double,System.Double)">
            <summary>
            Create an Ellipse centered and aligned with input Plane, with a x_radius 
            radius in the Plane X axis direction, and y_radius radius in the 
            Plane Y axis direction.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.HelixByAxis(Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IVectorEntity,Autodesk.DesignScript.Interfaces.IPointEntity,System.Double,System.Double)">
            <summary>
            Create a Helix. The helix always rotates clockwise about the supplied 
            axis direction. If viewing along the axis direction, the viewer will see 
            the point turning clockwise around the axis as it moves along the curve 
            in the direction of increasing parameter. Pitch is Distance the helix 
            moves in the axis direction per turn. This can be positive or negative.
            </summary>
            <search>helix</search>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.IndexGroupByIndices(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Create an IndexGroup storing four indices
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.IndexGroupByIndices(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Create an IndexGroup storing three indices
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.LineByStartPointEndPoint(Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IPointEntity)">
            <summary>
            Creates a straight Line between two input Points.
            </summary>
            <search>line</search>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.LineByBestFitThroughPoints(Autodesk.DesignScript.Interfaces.IPointEntity[])">
            <summary>
            Creates a Line best approximating a scatter plot of Points. 
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.LineByTangency(Autodesk.DesignScript.Interfaces.ICurveEntity,System.Double)">
            <summary>
            Create a Line tangent to the input Curve, positioned at the parameter
            Point of the input Curve.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.LineByStartPointDirectionLength(Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IVectorEntity,System.Double)">
            <summary>
            Create a straight Line starting at start Point, extending in Vector
            direction by specified length.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.NurbsCurveByControlPoints(Autodesk.DesignScript.Interfaces.IPointEntity[])">
             <summary>
             Create a BSplineCurve by using explicit control points.
            
             NOTE 1: BSplineCurves with deg=1 have G1 discontinuities, which cause problems
                     for extrusion, sweep, and other operations. They should be avoided. Use 
                     a PolyCurve instead. 
            
             NOTE 2: If the curve is periodic (closed), then the first and last
                     points MUST be the same.
             </summary>
             <search>nurbscurve</search>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.NurbsCurveByControlPoints(Autodesk.DesignScript.Interfaces.IPointEntity[],System.Int32)">
             <summary>
             Create a BSplineCurve by using explicit control points.
            
             NOTE 1: BSplineCurves with deg=1 have G1 discontinuities, which cause problems
                     for extrusion, sweep, and other operations. They should be avoided. Use 
                     a PolyCurve instead. 
            
             NOTE 2: If the curve is periodic (closed), then the first and last
                     points MUST be the same.
             </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.NurbsCurveByControlPoints(Autodesk.DesignScript.Interfaces.IPointEntity[],System.Int32,System.Boolean)">
             <summary>
             Create a BSplineCurve by using explicit control points.
            
             NOTE 1: BSplineCurves with deg=1 have G1 discontinuities, which cause problems
                     for extrusion, sweep, and other operations. They should be avoided. Use 
                     a PolyCurve instead. 
            
             NOTE 2: If the curve is periodic (closed), then the first and last
                     points MUST be the same.
             </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.NurbsCurveByControlPointsWeightsKnots(Autodesk.DesignScript.Interfaces.IPointEntity[],System.Double[],System.Double[],System.Int32)">
             <summary>
             Create a BSplineCurve by from control vertices, weights, and knots.
            
             FROM ASM DOCS:
            
             Degree: Should be greater than 1 (piecewise-linear spline) and less than 26 (the maximum 
             B-spline basis degree supported by ASM).
            
             Weights: All weight values (if supplied) should be strictly positive. 
             Weights smaller than 1e-11 will be rejected and the function will fail. 
            
             Knots: The knot vector should be a non-decreasing sequence. Interior knot
             multiplicity should be no larger than degree + 1 at the start/end knot and 
             degree at an internal knot (this allows curves with G1 discontinuities to be 
             represented). Note that non-clamped knot vectors are supported, but will be 
             converted to clamped ones, with the corresponding changes applied to the 
             control point/weight data. 
            
             knot array: the array size must be num_control_points + degree + 1
             </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.NurbsCurveByPoints(Autodesk.DesignScript.Interfaces.IPointEntity[])">
            <summary>
            Create a BSplineCurve by interpolating between points.
            </summary>
            <search>fit</search>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.NurbsCurveByPoints(Autodesk.DesignScript.Interfaces.IPointEntity[],System.Boolean)">
             <summary>
             Create a BSplineCurve by interpolating between points.
            
             NOTE 2: If the curve is periodic (closed), then the first and last
                    points MUST be the same.
             </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.NurbsCurveByPoints(Autodesk.DesignScript.Interfaces.IPointEntity[],System.Int32)">
            <summary>
            Create a BSplineCurve by interpolating between points with specified degree.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.NurbsCurveByPointsTangents(Autodesk.DesignScript.Interfaces.IPointEntity[],Autodesk.DesignScript.Interfaces.IVectorEntity,Autodesk.DesignScript.Interfaces.IVectorEntity)">
            <summary>
            Returns a BSplineCurve through the points, with tangent directions.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.NurbsSurfaceByPoints(Autodesk.DesignScript.Interfaces.IPointEntity[][],System.Int32,System.Int32)">
            <summary>
            Creates a NurbsSurface with specified interpolated points and 
            U and V degrees.  The resultant surface will pass through all
            of the points.
            </summary>
            <search>fit</search>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.NurbsSurfaceByPointsTangents(Autodesk.DesignScript.Interfaces.IPointEntity[][],Autodesk.DesignScript.Interfaces.IVectorEntity[],Autodesk.DesignScript.Interfaces.IVectorEntity[],Autodesk.DesignScript.Interfaces.IVectorEntity[],Autodesk.DesignScript.Interfaces.IVectorEntity[])">
            <summary>
            Creates a NurbsSurface with specified interpolated points and 
            U and V degrees.  The resultant surface will pass through all
            of the points.  The number of tangents must match the number of 
            points in the corresponding direction.  The resultant surface
            will be degree 3 in both the U and V direction.
            </summary>
            <search>fit</search>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.NurbsSurfaceByPointsTangentsKnotsDerivatives(Autodesk.DesignScript.Interfaces.IPointEntity[][],Autodesk.DesignScript.Interfaces.IVectorEntity[],Autodesk.DesignScript.Interfaces.IVectorEntity[],Autodesk.DesignScript.Interfaces.IVectorEntity[],Autodesk.DesignScript.Interfaces.IVectorEntity[],System.Double[],System.Double[],Autodesk.DesignScript.Interfaces.IVectorEntity[])">
            <summary>
            Creates a NurbsSurface satisfying a collection of different surface characteristics.
            This is the most advanced surface fitting method.  The resultant surface 
            will pass through all of the points.  The number of tangents must match 
            the number of points in the corresponding direction.  The resultant surface
            will be degree 3 in both the U and V direction.  The corner derivatives should be 
            second order (dP/dUdV) and should be supplied in this order [ lowU, lowV ], [ highU, lowV ], 
            [ lowU, highV ], [ highU, highV ].
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.NurbsSurfaceByControlPoints(Autodesk.DesignScript.Interfaces.IPointEntity[][],System.Int32,System.Int32)">
            <summary>
            Create a BSplineCurve by using explicit control Points, with specified U and V degrees.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.NurbsSurfaceByControlPointsWeightsKnots(Autodesk.DesignScript.Interfaces.IPointEntity[][],System.Double[][],System.Double[],System.Double[],System.Int32,System.Int32)">
             <summary>
             Creates a NurbsSurface with specified control vertices, knots, weights, 
             and U V degrees. 
            
             There are several restrictions on the data which, if
             broken, will cause the function to fail and will throw an exception.
            
             Degree: Both u- and v- degree should be >= 1 (piecewise-linear spline) 
                and  less than 26 (the maximum B-spline basis degree supported by ASM).
            
             Weights: All weight values (if supplied) should be strictly positive. 
             Weights smaller than 1e-11 will be rejected and the function will fail. 
            
             Knots: Both knot vectors should be non-decreasing sequences. Interior knot
             multiplicity should be no larger than degree + 1 at the start/end knot and 
             degree at an internal knot (this allows surfaces with G1 discontinuities to 
             be represented). Note that non-clamped knot vectors are supported, but will 
             be converted to clamped ones, with the corresponding changes applied to the 
             control point/weight data.
             </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.PlaneByOriginNormal(Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IVectorEntity)">
            <summary>
            Create a Plane centered at root Point, with input normal Vector. 
            </summary>
            <search>plane</search>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.PlaneByOriginNormalXAxis(Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IVectorEntity,Autodesk.DesignScript.Interfaces.IVectorEntity)">
             <summary>
             Create an "oriented" Plane, positioned at Point origin with Vector 
             normal, but with a specific X axis orientation. This has no impact
            to splitting, intersect, project, etc oporations, it only specifies
             the orientation of the input CoordinateSystem.
             </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.PlaneByOriginXAxisYAxis(Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IVectorEntity,Autodesk.DesignScript.Interfaces.IVectorEntity)">
            <summary>
            The X and Y axis lie in the plane. The Z axis is the cross product of the two Vectors. 
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.PlaneByBestFitThroughPoints(Autodesk.DesignScript.Interfaces.IPointEntity[])">
            <summary>
            Fits a Plane to the input Points; basically a 3D scatterplot fit.
            </summary>
            <search>fit</search>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.PlaneByLineAndPoint(Autodesk.DesignScript.Interfaces.ILineEntity,Autodesk.DesignScript.Interfaces.IPointEntity)">
            <summary>
            Create the Plane containing the input Line and external Point. Point
            cannot lie on the Line or in the Line axis.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.PlaneByThreePoints(Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IPointEntity)">
            <summary>
            Create a the Plane containing the three input Points.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.PlaneXY">
            <summary>
            Creates a plane in the world XY 
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.PlaneXZ">
            <summary>
            Creates a plane in the world XZ plane 
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.PlaneYZ">
            <summary>
            Creates a plane in the world YZ 
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.PointByCoordinates(System.Double,System.Double)">
            <summary>
            Form a Point in the XY plane given two 2 cartesian coordinates.  The Z component is 0.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.PointOrigin">
            <summary>
            Get the Origin point (0,0,0)
            </summary>
            <search>zero, origin</search>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.PointByCoordinates(System.Double,System.Double,System.Double)">
            <summary>
            Form a Point given 3 cartesian coordinates
            </summary>
            <search>point,xyz</search>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.PointByCartesianCoordinates(Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity,System.Double,System.Double,System.Double)">
            <summary>
            Form a Point in the given coordinate system with 3 cartesian coordinates
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.PointByCylindricalCoordinates(Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity,System.Double,System.Double,System.Double)">
            <summary>
            Form a Point in the given coordinate system given its position in cylindrical coordinates.
            </summary>
            <param name="cs">The coordinate system to build the point in</param>
            <param name="angle">The angle is the rotation from the X axis in the coordinate system around the Z axis in degrees</param>
            <param name="elevation">The elevation of the point above the XY plane</param>
            <param name="radius">The distance from the origin of the coordinate system</param>
            <returns>A new Point</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.PointBySphericalCoordinates(Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity,System.Double,System.Double,System.Double)">
            <summary>
            Form a Point in the given coordinate system given its position in cylindrical coordinates.
            </summary>
            <param name="cs">The coordinate system to build the point in</param>
            <param name="phi">The angle down from the Z axis in degrees</param>
            <param name="theta">The rotation around the sphere from the X axis in degrees</param>
            <param name="radius">The offset from the origin</param>
            <returns>A new Point</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.PointPruneDuplicates(Autodesk.DesignScript.Interfaces.IPointEntity[],System.Double)">
            <summary>
            Prune points to exclude duplicates within tolerance of included points
            </summary>
            <param name="points"> Points to prune </param> 
            <param name="tolerance"> Tolerance for pruning </param>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.PolygonByPoints(Autodesk.DesignScript.Interfaces.IPointEntity[])">
            <summary>
            Construct a Polygon Curve by connecting Points.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.PolygonRegularPolygon(Autodesk.DesignScript.Interfaces.ICircleEntity,System.Int32)">
            <summary>
            Construct a Polygon Curve by connecting Points.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.PolyCurveByJoinedCurves(Autodesk.DesignScript.Interfaces.ICurveEntity[])">
            <summary>
            Make PolyCurve by joining curves. Flips curve as needed for connectivity
            </summary>
            <param name="curves"> Curves to join into polycurve </param> 
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.PolyCurveByPoints(Autodesk.DesignScript.Interfaces.IPointEntity[],System.Boolean)">
            <summary>
            Make PolyCurve from sequence of lines connecting points. For closed curve last point should be in same location as start point.  
            </summary>
            <param name="points"> Points to make polycurve </param> 
            <param name="connectLastToFirst">make  close or open polycurve</param> 
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.PolyCurveByThickeningCurve(Autodesk.DesignScript.Interfaces.ICurveEntity,System.Double,Autodesk.DesignScript.Interfaces.IVectorEntity)">
            <summary>
            Make PolyCurve by thickening a curve.
            </summary>
            <param name="curve"> the curve to thicken </param> 
            <param name="thickness"> the thickness </param> 
            <param name="nor"> the normal perpendicular to the thickening direction </param> 
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.RectangleByCornerPoints(Autodesk.DesignScript.Interfaces.IPointEntity[])">
            <summary>
            Create a Rectangle by four corner Points.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.RectangleByCornerPoints(Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IPointEntity)">
            <summary>
            Create a Rectangle by four corner Points.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.RectangleByWidthHeight(System.Double,System.Double)">
            <summary>
            Create a Rectangle centered at the WCS origin in the WCS XY Plane, with
            specified width (X Axis length), and height (Y Axis length).
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.RectangleByWidthHeight(Autodesk.DesignScript.Interfaces.IPlaneEntity,System.Double,System.Double)">
            <summary>
            Create a Rectangle centered at input Plane root, with input width 
            (Plane X axis length) and (Plane Y axis length). 
            </summary>
            <search>rectangle</search>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.RectangleByWidthHeight(Autodesk.DesignScript.Interfaces.ICoordinateSystemEntity,System.Double,System.Double)">
            <summary>
            Create a Rectangle centered at the input origin in the CoordinateSystem 
            XY Plane, with specified width (X Axis length), and height 
            (Y Axis length).
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.SurfaceByLoft(Autodesk.DesignScript.Interfaces.ICurveEntity[])">
            <summary>
            Create a Surface by lofting between input cross section Curves.
            </summary>
            <search>loft</search>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.SurfaceByRuledLoft(Autodesk.DesignScript.Interfaces.ILineEntity[])">
            <summary>
            Create a Surface by lofting between input cross section Lines.  This is slightly faster
            and produces a less smooth result than Surface.ByLoft.  
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.SurfaceByLoft(Autodesk.DesignScript.Interfaces.ICurveEntity[],Autodesk.DesignScript.Interfaces.ICurveEntity)">
             <summary>
             Loft a Surface through the cross sections with a specified guide curve
            (aka a rail). Guide curve must intersect all of the cross section 
             curves.
             </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.SurfaceByLoft(Autodesk.DesignScript.Interfaces.ICurveEntity[],Autodesk.DesignScript.Interfaces.ICurveEntity[])">
             <summary>
             Loft a Surface through the cross sections with a specified guide curves
            (aka a rails). Guide curves must intersect all of the cross section 
             curves.
             </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.SurfaceBySweep(Autodesk.DesignScript.Interfaces.ICurveEntity,Autodesk.DesignScript.Interfaces.ICurveEntity)">
            <summary>
            Create a Surface by sweeping a cross section Curve along a path.
            </summary>
            <search>sweep</search>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.SurfaceByPerimeterPoints(Autodesk.DesignScript.Interfaces.IPointEntity[])">
            <summary>
            Create a Polygon Surface connecting input Points in a closed Polygon and
            patching it. 
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.SurfaceBySweep2Rails(Autodesk.DesignScript.Interfaces.ICurveEntity,Autodesk.DesignScript.Interfaces.ICurveEntity,Autodesk.DesignScript.Interfaces.ICurveEntity)">
            <summary>
            Sweep the cross section curve along a path guided by a two rails
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.SurfaceByRevolve(Autodesk.DesignScript.Interfaces.ICurveEntity,Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IVectorEntity,System.Double,System.Double)">
            <summary>
            Create a Surface by sweeping the profile Curve around the axis ray formed 
            by origin Point in the direction of the axis Vector, starting
            at start_angle in degrees, sweeping sweep_angle in degrees.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.SurfaceByPatch(Autodesk.DesignScript.Interfaces.ICurveEntity)">
            <summary>
            Create a Surface by filling in the interior of a closed boundary
            defined by input Curves.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.SolidByJoinedSurfaces(Autodesk.DesignScript.Interfaces.ISurfaceEntity[])">
            <summary>
            Create a solid by specifying it's component faces as Surfaces.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.SolidByLoft(Autodesk.DesignScript.Interfaces.ICurveEntity[])">
            <summary>
            Create a Solid by lofting between input cross section closed Curves.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.SolidByLoft(Autodesk.DesignScript.Interfaces.ICurveEntity[],Autodesk.DesignScript.Interfaces.ICurveEntity)">
            <summary>
            Create a Solid by lofting between input cross section closed Curves, 
            with guide Curve to assist. Guide Curve must intersect all cross section
            Curves. 
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.SolidByLoft(Autodesk.DesignScript.Interfaces.ICurveEntity[],Autodesk.DesignScript.Interfaces.ICurveEntity[])">
            <summary>
            Create a Solid by lofting between input cross section closed Curves, 
            with guide Curves to assist. Guide Curves must intersect all cross 
            section Curves.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.SolidBySweep(Autodesk.DesignScript.Interfaces.ICurveEntity,Autodesk.DesignScript.Interfaces.ICurveEntity)">
            <summary>
            Sweep a closed Curve along a path.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.SolidBySweep2Rails(Autodesk.DesignScript.Interfaces.ICurveEntity,Autodesk.DesignScript.Interfaces.ICurveEntity,Autodesk.DesignScript.Interfaces.ICurveEntity)">
            <summary>
            Sweep a closed profile Curve along two rail Curves.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.SolidByRevolve(Autodesk.DesignScript.Interfaces.ICurveEntity,Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IVectorEntity,System.Double,System.Double)">
            <summary>
            Create a Surface of revolution, sweeping the profile Curve around the
            axis Ray formed by the origin and the axis Vector, from the start
            angle in degrees to the sweep angle in degrees.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.SolidByUnion(Autodesk.DesignScript.Interfaces.ISolidEntity[])">
            <summary>
            Union a collection of solids into one solid
            </summary>
            <param name="solids">A collection of solids</param>
            <returns></returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.SphereByCenterPointRadius(Autodesk.DesignScript.Interfaces.IPointEntity,System.Double)">
            <summary>
            Create a Solid Sphere cetered at the input Point, with given radius.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.SphereByFourPoints(Autodesk.DesignScript.Interfaces.IPointEntity[])">
            <summary>
            Create a Solid Sphere containing four input Points on the surface.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.SphereByBestFit(Autodesk.DesignScript.Interfaces.IPointEntity[])">
            <summary>
            Fit a Sphere as close as possible to the input Points.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.UVByCoordinates(System.Double,System.Double)">
            <summary>
            Create a UV from two doubles.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.VectorByCoordinates(System.Double,System.Double,System.Double)">
            <summary>
            Form a Vector by 3 Euclidean coordinates
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <returns></returns>
            <search>vector</search>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.VectorByCoordinates(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Form a Vector by 3 Euclidean coordinates and normalize the Vector
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="z">Z coordinate</param>
            <param name="normalized">Whether to normalize the result Vector or not</param>
            <returns></returns>
            <search>normalize</search>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.VectorByTwoPoints(Autodesk.DesignScript.Interfaces.IPointEntity,Autodesk.DesignScript.Interfaces.IPointEntity)">
            <summary>
            Form a Vector by two end points.  The result is a vector from the start to the end point.
            </summary>
            <param name="from">The start point</param>
            <param name="to">The end point</param>
            <returns></returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.VectorXAxis">
            <summary>
            Get the canonical X axis Vector (1,0,0)
            </summary>
            <returns></returns>
            <search>x, basis</search>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.VectorYAxis">
            <summary>
            Get the canonical Y axis Vector (0,1,0)
            </summary>
            <returns></returns>
            <search>y, basis</search>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.VectorZAxis">
            <summary>
            Get the canonical Z axis Vector (0,0,1)
            </summary>
            <returns></returns>
            <search>z, basis</search>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.PolySurfaceByLoft(Autodesk.DesignScript.Interfaces.ICurveEntity[])">
            <summary>
            Makes PolySurface by Loft through Curves.
            </summary>
            <param name="crossSections">Curves to loft through. </param>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.PolySurfaceByLoft(Autodesk.DesignScript.Interfaces.ICurveEntity[],Autodesk.DesignScript.Interfaces.ICurveEntity)">
            <summary>
            Makes PolySurface by Loft through PolyCurves.
            </summary>
            <param name="crossSections">Curves to loft through. </param>
            <param name="guideCurve">Curve to guide loft through. </param>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.PolySurfaceByLoftGuides(Autodesk.DesignScript.Interfaces.ICurveEntity[],Autodesk.DesignScript.Interfaces.ICurveEntity[])">
            <summary>
            Makes PolySurface by Loft through PolyCurves.
            </summary>
            <param name="crossSections">Curves to loft through. </param>
            <param name="guideCurves">Curves to guide loft through. </param>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.PolySurfaceByJoinedSurfaces(Autodesk.DesignScript.Interfaces.ISurfaceEntity[])">
            <summary>
            Make Polysurface by joining surfaces. 
            </summary>
            <param name="surfaces"> Surfaces to join into polysurface </param> 
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.PolySurfaceBySolid(Autodesk.DesignScript.Interfaces.ISolidEntity)">
            <summary>
            Make Polysurface by surfaces of Solid. 
            </summary>
            <param name="solid"> Solid which surfaces to use </param> 
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.PolySurfaceBySweep(Autodesk.DesignScript.Interfaces.ICurveEntity,Autodesk.DesignScript.Interfaces.ICurveEntity[])">
            <summary>
            Make Polysurface by sweeping curves along rail. 
            </summary>
            <param name="rail"> Curve to sweep along </param> 
            <param name="crossSection">  Sweep profile </param> 
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.PolySurfaceBySweep(Autodesk.DesignScript.Interfaces.ICurveEntity,Autodesk.DesignScript.Interfaces.ICurveEntity)">
            <summary>
            Make Polysurface by sweeping a curve along rail. 
            </summary>
            <param name="rail"> Curve to sweep along </param> 
            <param name="profile">  Sweep profile </param> 
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.MeshByPointsFaceIndices(Autodesk.DesignScript.Interfaces.IPointEntity[],Autodesk.DesignScript.Interfaces.IIndexGroupEntity[])">
            <summary>
            Create a mesh from a collection of Points and a collection of IndexGroups referencing the Point collection
            </summary>
            <param name="vertexPositions"></param>
            <param name="indices"></param>
            <returns></returns>
            <search>mesh</search>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.LoadSAT(System.String)">
            <summary>
            Parses a ".sat" or ".smt" file for Curve, Surface, and Solid objects,
            and returns newly created objects. WARNING: non-ascii characters
            are not supported in file nams.
            </summary>
            <search>import</search>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.DeserializeFromSAB(System.Byte[])">
            <summary>
            Takes a SAB file as input, and deserializes the ASM geometry into
            a LibG object
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.SaveSAT(System.String,System.Object[])">
            <summary>
            Exports list of objects to a file, exported as a ACIS 7 SAT file,
            and returns the path to the exported file, throwing an exception
            on failure. 
            </summary>
            <search>export</search>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGeometryFactory.SerializeAsSAB(System.Object[])">
            <summary>
            Serializes the object as an ACIS 7 binary stream
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Interfaces.IGraphEditorHostApplication">
            <summary>
            This interface is implemented by the various host of GraphEditor to
            pass some configuration parameters as well as to receive some event
            notifications required by the host application to update itself.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGraphEditorHostApplication.PostGraphUpdate">
            <summary>
            This method is called by the graph controller to notify host app
            that the graph execution has finished and graph is updated. Host
            app would like to refresh it's graphics or perform some cleanup.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGraphEditorHostApplication.GraphActivated(System.UInt32)">
            <summary>
            When the current graph is suppressed and a new graph is activated
            this method is called by the graph controller, so that host app
            can setup or activate a document corresponding to given graph id.
            </summary>
            <param name="graphId"></param>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IGraphEditorHostApplication.Configurations">
            <summary>
            Name value pair for configuration parameters. Mostly the 
            configuration keys are used from ConfigurationKeys class.
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Interfaces.IConfiguration">
            <summary>
            Provides application configuration
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IConfiguration.GetConfigValue(System.String)">
            <summary>
            Gets application defined configuration value.
            </summary>
            <param name="config">Configuration name</param>
            <returns>Configuration value</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IConfiguration.SetConfigValue(System.String,System.Object)">
            <summary>
            Set application defined configuration value.
            </summary>
            <param name="config">Configuration name</param>
            <param name="value">Configuration value</param>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IConfiguration.RootModulePath">
            <summary>
            Provides the path of main executing script
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IConfiguration.IncludeDirectories">
            <summary>
            Provides list of include directories.
            </summary>
        </member>
        <member name="F:Autodesk.DesignScript.Interfaces.ConfigurationKeys.GeometryFactory">
            <summary>
            This key is used to configure the library filename, which implements 
            IGeometryFactory interface.
            </summary>
        </member>
        <member name="F:Autodesk.DesignScript.Interfaces.ConfigurationKeys.PersistentManager">
            <summary>
            This key is used to configure the library filename, which implements 
            IPersistenceManager interface.
            </summary>
        </member>
        <member name="F:Autodesk.DesignScript.Interfaces.ConfigurationKeys.GeometryProvider">
            <summary>
            This key is used to set/get IContextDataProvider implementation
            by host application.
            </summary>
        </member>
        <member name="F:Autodesk.DesignScript.Interfaces.ConfigurationKeys.SessionDatabase">
            <summary>
            This key is used to set the session database object for the host
            application. THIS IS NOW DEPRECATED (use "SessionKey" instead).
            </summary>
        </member>
        <member name="F:Autodesk.DesignScript.Interfaces.ConfigurationKeys.SessionKey">
            <summary>
            This key is used to set the session key (by the host application) 
            which is understood by the corresponding IPersistenceManager when 
            it comes to telling one session from another. An example of 
            session would be the documents in the host application, a host 
            document can be identified with a session key, and each host 
            document has a unique session key that IPersistenceManager can use
            to differentiate between two documents. The corresponding value 
            for SessionKey is a value of "string" type.
            </summary>
        </member>
        <member name="F:Autodesk.DesignScript.Interfaces.ConfigurationKeys.RequestExplicitLock">
            <summary>
            This key is used to request explicit lock on database by the host
            application before execution of the script. The corresponding value
            is bool.
            </summary>
        </member>
        <member name="F:Autodesk.DesignScript.Interfaces.ConfigurationKeys.RecordingUserActions">
            <summary>
            This key is used to check if the application is recording user actions.
            The corresponding value is bool.
            </summary>
        </member>
        <member name="F:Autodesk.DesignScript.Interfaces.ConfigurationKeys.ClearPersistedObjects">
            <summary>
            This key is used to determine if the persistent objects should be cleared on 
            screen before each run. In live execution scenarios like DesignScript Studio,
            there is no clear distinction between runs. For more information, please see 
            "AsmExtensionApplication::OnBeginExecution" in "AsmExtensionApplication.cpp".
            </summary>
        </member>
        <member name="F:Autodesk.DesignScript.Interfaces.ConfigurationKeys.GeometricPreviewEnabled">
            <summary>
            This key is being referenced in "DesignScriptStudio.Graph.Ui.GraphControl"
            as a way to determine if the underlying "RenderService" should be enabled.
            The default behaviour (if this flag is not specified) is to enable geometric 
            preview. The "object" value being passed for this configuration key is 
            expected to be a "bool" object rather than a "string" object.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Autodesk.DesignScript.Interfaces.ConfigurationKeys.FilteredClasses" -->
        <member name="F:Autodesk.DesignScript.Interfaces.ConfigurationKeys.GeometryXmlProperties">
            <summary>
            This key is referenced in the geometry test framework.
            The value type for this key is bool.
            If the value is true, that means the core will generate XML properties.
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Interfaces.IExecutionSession">
            <summary>
            Represents a session object for current execution.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IExecutionSession.SearchFile(System.String)">
            <summary>
            Searches the given file and returns full path, if found.
            </summary>
            <param name="filename">File name to search.</param>
            <returns>Full path of given filename or empty string if file not 
            found.</returns>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IExecutionSession.Configuration">
            <summary>
            Gets the configuration object for this execution session.
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Interfaces.IExtensionApplication">
            <summary>
            An FFI library can implement this interface to get some notifications
            from DesignScript application.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IExtensionApplication.StartUp">
            <summary>
            Called when first time this application is loaded.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IExtensionApplication.OnBeginExecution(Autodesk.DesignScript.Interfaces.IExecutionSession)">
            <summary>
            Called when script execution starts.
            </summary>
            <param name="session">Execution session object with which script
            execution starts.</param>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IExtensionApplication.OnSuspendExecution(Autodesk.DesignScript.Interfaces.IExecutionSession)">
            <summary>
            Called when script execution is suspended for debugging/inspection
            </summary>
            <param name="session">Execution session object with which script
            execution starts.</param>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IExtensionApplication.OnResumeExecution(Autodesk.DesignScript.Interfaces.IExecutionSession)">
            <summary>
            Called when script execution is resumed after debugging/inspection
            </summary>
            <param name="session">Execution session object with which script
            execution starts.</param>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IExtensionApplication.OnEndExecution(Autodesk.DesignScript.Interfaces.IExecutionSession)">
            <summary>
            Called when script execution has ended.
            </summary>
            <param name="session">Execution session object with which script
            execution had started.</param>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IExtensionApplication.ShutDown">
            <summary>
            Called when designscript application is shutting down.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IExtensionApplication.PreloadAsmLibraries(System.String)">
            <summary>
            Preloads unmanaged ASM libraries 
            </summary>
            <param name="baseDirectory"></param>
        </member>
        <member name="T:Autodesk.DesignScript.Interfaces.IContextData">
            <summary>
            Represents an external data to be used as context for execution.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IContextData.Name">
            <summary>
            Gets name of the data. This context data can be identified with
            name in designscript world.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IContextData.Data">
            <summary>
            The context data as represented in DesignScript
            </summary>
        </member>
        <member name="E:Autodesk.DesignScript.Interfaces.IContextData.DataChanged">
            <summary>
            Event notifier to notify when it's data changes.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IContextData.ContextProvider">
            <summary>
            Gets the context provider for interpretation of data in designscript
            world.
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Interfaces.IContextDataProvider">
            <summary>
            Represents a connector to external data source to provide context 
            speicific data. This interface provide import/export feature for any 
            context specific data. It also provides a mechanism to capture data 
            interactively.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IContextDataProvider.ImportData(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Imports specific the context data using the given identifier string.
            </summary>
            <param name="connectionParameters">Input dictionary of connection parameters 
            to connect to the data source to import the data. Each context data in 
            the list contains pair of connection parameter name and value</param>
            <returns></returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IContextDataProvider.ExportData(Autodesk.DesignScript.Interfaces.IContextData[],System.String)">
            <summary>
            Exports data to specified file. This context provider determines the
            format for data store and returns the connection string for the given
            file using which this data can be imported back again.
            </summary>
            <param name="data">Collection of data that needs to be exported.</param>
            <param name="filePath">Path for the file where this data can be 
            exported and saved.</param>
            <returns>The connection parameters using which the exported data can be 
            imported in future.Each context data in the list contains 
            pair of connection parameter name and value</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IContextDataProvider.CaptureData">
            <summary>
            Begins data capture interaction in the specific context and returns 
            collection of captured data.
            </summary>
            <returns>Dictionary of connection parameters to import the data 
            captured by interaction. Each context data in the list contains 
            pair of connection parameter name and value</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IContextDataProvider.GetExpression(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Returns DesignScript expression for given parameters assigned to input
            variable.
            </summary>
            <param name="parameters">Captured parameters to be converted to
            DesignScript expression assigned to the input variable.</param>
            <param name="variable">Variable name to which imported data to be 
            assigned.</param>
            <returns>DesignScript expression string</returns>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IContextDataProvider.Name">
            <summary>
            Gets the name of this data provider to identify it uniquely.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPersistentObject.Erase">
            <summary>
            Erases the persisted object from database.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IPersistentObject.Geometry">
            <summary>
            
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPersistenceManager.Persist(Autodesk.DesignScript.Interfaces.IDesignScriptEntity)">
            <summary>
            Makes the given entity persistent.
            </summary>
            <param name="entity">DesignScript entity that needs to be persisted
            in host application.</param>
            <returns>IPersistentObject</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPersistenceManager.UpdateDisplay">
            <summary>
            Updates the view to show the most up-to-date geometries.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPersistenceManager.GetPersistentObjectFromHandle(System.Object)">
            <summary>
            Gets a persistent object using object's handle.
            </summary>
            <param name="handle">Handle to persistent object</param>
            <returns>IPersistentObject identified from input handle</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPersistenceManager.SupportsGeometryCapture">
            <summary>
            Checks if the host application supports geometry selection or
            capture to import geometry from host application to designscript
            </summary>
            <returns>true/false</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPersistenceManager.CaptureGeometry">
            <summary>
            Allows capture of geometry data interactively from host application 
            and get an array of IDesignScriptEntity based on selection.
            </summary>
            <returns>Collection of captured IDesignScriptEntity</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IPersistenceManager.FromObject(System.Int64)">
            <summary>
            Create a DesignScript host entity based on the persisted object in
            the application
            </summary>
            <param name="ptr"></param>
            <returns></returns>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IPersistenceManager.GeometryFactory">
            <summary>
            Get's Geometry factory that design script system is using.
            This property will be set by the system, once GeometryFactory 
            is instanciated.
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Interfaces.IRenderPackage">
            <summary>
            This interface caches render specific data.
            </summary>
        </member>
        <member name="P:Autodesk.DesignScript.Interfaces.IRenderPackage.NativeRenderPackage">
            <summary>
            Returns pointer to abstract C++ class RenderPackage, which is 
            actually the implementation class for this interface.
            </summary>
        </member>
        <member name="T:Autodesk.DesignScript.Interfaces.IGraphicItem">
            <summary>
            Represents a graphics item object, that can provide tesselated data
            into the given render package.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGraphicItem.Tessellate(Autodesk.DesignScript.Interfaces.IRenderPackage,System.Double,System.Int32)">
            <summary>
            Gets the graphics/tesselation data in given render package object.
            </summary>
            <param name="package">The render package, where graphics data to be
            pushed.</param>
            <param name="tol">The tolerance for faceting</param>
        </member>
        <member name="T:Autodesk.DesignScript.Interfaces.IGraphicDataProvider">
            <summary>
            This interface provides graphics data into the RenderPackage interface 
            for given set of objects.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGraphicDataProvider.GetGraphicItems(System.Object)">
            <summary>
            Returns a list of IGraphicItem owned by the given object.
            </summary>
            <param name="obj">The object for which graphics items are queried.
            </param>
            <returns>List of IGraphicItem owned by the input object.</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Interfaces.IGraphicDataProvider.Tessellate(System.Collections.Generic.List{System.Object},Autodesk.DesignScript.Interfaces.IRenderPackage,System.Double)">
            <summary>
            Gets the Graphics/Render data into the given render package.
            </summary>
            <param name="objects">Objects which owns some graphics items</param>
            <param name="package">RenderPackage where graphics/render data can
            be pushed/set.</param>
            <param name="tol">The tolerance for faceting</param>
        </member>
        <member name="T:Autodesk.DesignScript.Runtime.XmlDocumentationExtensions">
            <summary>
            Provides extension methods for reading XML comments from reflected members.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Runtime.XmlDocumentationExtensions.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Autodesk.DesignScript.Runtime.XmlDocumentationExtensions.GetMemberElementName(System.Reflection.MemberInfo)">
            <summary>
            Returns the expected name for a member element in the XML documentation file.
            </summary>
            <param name="member">The reflected member.</param>
            <returns>The name of the member element.</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Runtime.XmlDocumentationExtensions.GetXmlDocumentation(System.Reflection.MemberInfo)">
            <summary>
            Returns the XML documentation (summary tag) for the specified member.
            </summary>
            <param name="member">The reflected member.</param>
            <returns>The contents of the summary tag for the member.</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Runtime.XmlDocumentationExtensions.GetXmlDocumentation(System.Reflection.MemberInfo,System.String)">
            <summary>
            Returns the XML documentation (summary tag) for the specified member.
            </summary>
            <param name="member">The reflected member.</param>
            <param name="pathToXmlFile">Path to the XML documentation file.</param>
            <returns>The contents of the summary tag for the member.</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Runtime.XmlDocumentationExtensions.GetXmlDocumentation(System.Reflection.MemberInfo,System.Xml.Linq.XDocument)">
            <summary>
            Returns the XML documentation (summary tag) for the specified member.
            </summary>
            <param name="member">The reflected member.</param>
            <param name="xml">XML documentation.</param>
            <returns>The contents of the summary tag for the member.</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Runtime.XmlDocumentationExtensions.GetXmlDocumentation(System.Reflection.ParameterInfo)">
            <summary>
            Returns the XML documentation (returns/param tag) for the specified parameter.
            </summary>
            <param name="parameter">The reflected parameter (or return value).</param>
            <returns>The contents of the returns/param tag for the parameter.</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Runtime.XmlDocumentationExtensions.GetXmlDocumentation(System.Reflection.ParameterInfo,System.String)">
            <summary>
            Returns the XML documentation (returns/param tag) for the specified parameter.
            </summary>
            <param name="parameter">The reflected parameter (or return value).</param>
            <param name="pathToXmlFile">Path to the XML documentation file.</param>
            <returns>The contents of the returns/param tag for the parameter.</returns>
        </member>
        <member name="M:Autodesk.DesignScript.Runtime.XmlDocumentationExtensions.GetXmlDocumentation(System.Reflection.ParameterInfo,System.Xml.Linq.XDocument)">
            <summary>
            Returns the XML documentation (returns/param tag) for the specified parameter.
            </summary>
            <param name="parameter">The reflected parameter (or return value).</param>
            <param name="xml">XML documentation.</param>
            <returns>The contents of the returns/param tag for the parameter.</returns>
        </member>
    </members>
</doc>
